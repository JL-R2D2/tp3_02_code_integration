
tdse-tp3_02-code_integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080036b4  080036b4  000046b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038bc  080038bc  00005080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080038bc  080038bc  000048bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038c4  080038c4  00005080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c4  080038c4  000048c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038c8  080038c8  000048c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080038cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000080  0800394c  00005080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  0800394c  00005348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007975  00000000  00000000  000050a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ed  00000000  00000000  0000ca1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0000e410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052a  00000000  00000000  0000eaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c9c  00000000  00000000  0000f01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a91  00000000  00000000  00026cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083484  00000000  00000000  00030747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3bcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002644  00000000  00000000  000b3c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000b6254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	0800369c 	.word	0x0800369c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	0800369c 	.word	0x0800369c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f002 f8e6 	bl	8002330 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fa1e 	bl	80005a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f809 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f872 	bl	8000254 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f846 	bl	8000200 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
	app_init();
 8000174:	f001 fa5c 	bl	8001630 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 8000178:	f001 fb14 	bl	80017a4 <app_update>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	@ 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	@ 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f002 fb56 	bl	800283e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b0:	2300      	movs	r3, #0
 80001b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fd48 	bl	8000c54 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ca:	f000 f8dd 	bl	8000388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 ffb5 	bl	8001158 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f4:	f000 f8c8 	bl	8000388 <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	@ 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000204:	4b11      	ldr	r3, [pc, #68]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000206:	4a12      	ldr	r2, [pc, #72]	@ (8000250 <MX_USART2_UART_Init+0x50>)
 8000208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800020a:	4b10      	ldr	r3, [pc, #64]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800020c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000212:	4b0e      	ldr	r3, [pc, #56]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000218:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800021e:	4b0b      	ldr	r3, [pc, #44]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000224:	4b09      	ldr	r3, [pc, #36]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000226:	220c      	movs	r2, #12
 8000228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022a:	4b08      	ldr	r3, [pc, #32]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000230:	4b06      	ldr	r3, [pc, #24]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000236:	4805      	ldr	r0, [pc, #20]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000238:	f001 f91c 	bl	8001474 <HAL_UART_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000242:	f000 f8a1 	bl	8000388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	2000009c 	.word	0x2000009c
 8000250:	40004400 	.word	0x40004400

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000268:	4b42      	ldr	r3, [pc, #264]	@ (8000374 <MX_GPIO_Init+0x120>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a41      	ldr	r2, [pc, #260]	@ (8000374 <MX_GPIO_Init+0x120>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b3f      	ldr	r3, [pc, #252]	@ (8000374 <MX_GPIO_Init+0x120>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0310 	and.w	r3, r3, #16
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000280:	4b3c      	ldr	r3, [pc, #240]	@ (8000374 <MX_GPIO_Init+0x120>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a3b      	ldr	r2, [pc, #236]	@ (8000374 <MX_GPIO_Init+0x120>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b39      	ldr	r3, [pc, #228]	@ (8000374 <MX_GPIO_Init+0x120>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0320 	and.w	r3, r3, #32
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000298:	4b36      	ldr	r3, [pc, #216]	@ (8000374 <MX_GPIO_Init+0x120>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a35      	ldr	r2, [pc, #212]	@ (8000374 <MX_GPIO_Init+0x120>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b33      	ldr	r3, [pc, #204]	@ (8000374 <MX_GPIO_Init+0x120>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b0:	4b30      	ldr	r3, [pc, #192]	@ (8000374 <MX_GPIO_Init+0x120>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000374 <MX_GPIO_Init+0x120>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000374 <MX_GPIO_Init+0x120>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0308 	and.w	r3, r3, #8
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80002ce:	482a      	ldr	r0, [pc, #168]	@ (8000378 <MX_GPIO_Init+0x124>)
 80002d0:	f000 fc86 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80002da:	4828      	ldr	r0, [pc, #160]	@ (800037c <MX_GPIO_Init+0x128>)
 80002dc:	f000 fc80 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2180      	movs	r1, #128	@ 0x80
 80002e4:	4826      	ldr	r0, [pc, #152]	@ (8000380 <MX_GPIO_Init+0x12c>)
 80002e6:	f000 fc7b 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002f0:	4b24      	ldr	r3, [pc, #144]	@ (8000384 <MX_GPIO_Init+0x130>)
 80002f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002f8:	f107 0310 	add.w	r3, r7, #16
 80002fc:	4619      	mov	r1, r3
 80002fe:	4820      	ldr	r0, [pc, #128]	@ (8000380 <MX_GPIO_Init+0x12c>)
 8000300:	f000 faea 	bl	80008d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D8_Pin;
 8000304:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030a:	2301      	movs	r3, #1
 800030c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000312:	2302      	movs	r3, #2
 8000314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	4619      	mov	r1, r3
 800031c:	4816      	ldr	r0, [pc, #88]	@ (8000378 <MX_GPIO_Init+0x124>)
 800031e:	f000 fadb 	bl	80008d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8000322:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000328:	2301      	movs	r3, #1
 800032a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000330:	2302      	movs	r3, #2
 8000332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000334:	f107 0310 	add.w	r3, r7, #16
 8000338:	4619      	mov	r1, r3
 800033a:	4810      	ldr	r0, [pc, #64]	@ (800037c <MX_GPIO_Init+0x128>)
 800033c:	f000 facc 	bl	80008d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8000340:	2380      	movs	r3, #128	@ 0x80
 8000342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2302      	movs	r3, #2
 800034e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	480a      	ldr	r0, [pc, #40]	@ (8000380 <MX_GPIO_Init+0x12c>)
 8000358:	f000 fabe 	bl	80008d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	2100      	movs	r1, #0
 8000360:	2028      	movs	r0, #40	@ 0x28
 8000362:	f000 fa7c 	bl	800085e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000366:	2028      	movs	r0, #40	@ 0x28
 8000368:	f000 fa95 	bl	8000896 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800036c:	bf00      	nop
 800036e:	3720      	adds	r7, #32
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40021000 	.word	0x40021000
 8000378:	40010800 	.word	0x40010800
 800037c:	40010c00 	.word	0x40010c00
 8000380:	40011000 	.word	0x40011000
 8000384:	10110000 	.word	0x10110000

08000388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038c:	b672      	cpsid	i
}
 800038e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <Error_Handler+0x8>

08000394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800039a:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <HAL_MspInit+0x5c>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a14      	ldr	r2, [pc, #80]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b2:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	4a0e      	ldr	r2, [pc, #56]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003bc:	61d3      	str	r3, [r2, #28]
 80003be:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ca:	4b0a      	ldr	r3, [pc, #40]	@ (80003f4 <HAL_MspInit+0x60>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	4a04      	ldr	r2, [pc, #16]	@ (80003f4 <HAL_MspInit+0x60>)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e6:	bf00      	nop
 80003e8:	3714      	adds	r7, #20
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010000 	.word	0x40010000

080003f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a15      	ldr	r2, [pc, #84]	@ (8000468 <HAL_UART_MspInit+0x70>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d123      	bne.n	8000460 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000418:	4b14      	ldr	r3, [pc, #80]	@ (800046c <HAL_UART_MspInit+0x74>)
 800041a:	69db      	ldr	r3, [r3, #28]
 800041c:	4a13      	ldr	r2, [pc, #76]	@ (800046c <HAL_UART_MspInit+0x74>)
 800041e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000422:	61d3      	str	r3, [r2, #28]
 8000424:	4b11      	ldr	r3, [pc, #68]	@ (800046c <HAL_UART_MspInit+0x74>)
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000430:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <HAL_UART_MspInit+0x74>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a0d      	ldr	r2, [pc, #52]	@ (800046c <HAL_UART_MspInit+0x74>)
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <HAL_UART_MspInit+0x74>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	60bb      	str	r3, [r7, #8]
 8000446:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000448:	230c      	movs	r3, #12
 800044a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800044c:	2302      	movs	r3, #2
 800044e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000450:	2302      	movs	r3, #2
 8000452:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	4619      	mov	r1, r3
 800045a:	4805      	ldr	r0, [pc, #20]	@ (8000470 <HAL_UART_MspInit+0x78>)
 800045c:	f000 fa3c 	bl	80008d8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000460:	bf00      	nop
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40004400 	.word	0x40004400
 800046c:	40021000 	.word	0x40021000
 8000470:	40010800 	.word	0x40010800

08000474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <NMI_Handler+0x4>

0800047c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <HardFault_Handler+0x4>

08000484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <MemManage_Handler+0x4>

0800048c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <BusFault_Handler+0x4>

08000494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <UsageFault_Handler+0x4>

0800049c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c4:	f000 f8b4 	bl	8000630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  	HAL_SYSTICK_IRQHandler();
 80004c8:	f000 f9ff 	bl	80008ca <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004d8:	f000 fb9a 	bl	8000c10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004e8:	4a14      	ldr	r2, [pc, #80]	@ (800053c <_sbrk+0x5c>)
 80004ea:	4b15      	ldr	r3, [pc, #84]	@ (8000540 <_sbrk+0x60>)
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004f4:	4b13      	ldr	r3, [pc, #76]	@ (8000544 <_sbrk+0x64>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d102      	bne.n	8000502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004fc:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <_sbrk+0x64>)
 80004fe:	4a12      	ldr	r2, [pc, #72]	@ (8000548 <_sbrk+0x68>)
 8000500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000502:	4b10      	ldr	r3, [pc, #64]	@ (8000544 <_sbrk+0x64>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	693a      	ldr	r2, [r7, #16]
 800050c:	429a      	cmp	r2, r3
 800050e:	d207      	bcs.n	8000520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000510:	f002 f9e4 	bl	80028dc <__errno>
 8000514:	4603      	mov	r3, r0
 8000516:	220c      	movs	r2, #12
 8000518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	e009      	b.n	8000534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <_sbrk+0x64>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000526:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <_sbrk+0x64>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	4a05      	ldr	r2, [pc, #20]	@ (8000544 <_sbrk+0x64>)
 8000530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000532:	68fb      	ldr	r3, [r7, #12]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20005000 	.word	0x20005000
 8000540:	00000400 	.word	0x00000400
 8000544:	200000e4 	.word	0x200000e4
 8000548:	20000348 	.word	0x20000348

0800054c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000558:	f7ff fff8 	bl	800054c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800055c:	480b      	ldr	r0, [pc, #44]	@ (800058c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800055e:	490c      	ldr	r1, [pc, #48]	@ (8000590 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000560:	4a0c      	ldr	r2, [pc, #48]	@ (8000594 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000572:	4a09      	ldr	r2, [pc, #36]	@ (8000598 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000574:	4c09      	ldr	r4, [pc, #36]	@ (800059c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000582:	f002 f9b1 	bl	80028e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000586:	f7ff fde9 	bl	800015c <main>
  bx lr
 800058a:	4770      	bx	lr
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000590:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000594:	080038cc 	.word	0x080038cc
  ldr r2, =_sbss
 8000598:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800059c:	20000348 	.word	0x20000348

080005a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC1_2_IRQHandler>
	...

080005a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a8:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <HAL_Init+0x28>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <HAL_Init+0x28>)
 80005ae:	f043 0310 	orr.w	r3, r3, #16
 80005b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f947 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 f808 	bl	80005d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f7ff fee8 	bl	8000394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40022000 	.word	0x40022000

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d8:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <HAL_InitTick+0x54>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <HAL_InitTick+0x58>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4619      	mov	r1, r3
 80005e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f95f 	bl	80008b2 <HAL_SYSTICK_Config>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
 80005fc:	e00e      	b.n	800061c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b0f      	cmp	r3, #15
 8000602:	d80a      	bhi.n	800061a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000604:	2200      	movs	r2, #0
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	f04f 30ff 	mov.w	r0, #4294967295
 800060c:	f000 f927 	bl	800085e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000610:	4a06      	ldr	r2, [pc, #24]	@ (800062c <HAL_InitTick+0x5c>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	e000      	b.n	800061c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004

08000630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <HAL_IncTick+0x1c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <HAL_IncTick+0x20>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4413      	add	r3, r2
 8000640:	4a03      	ldr	r2, [pc, #12]	@ (8000650 <HAL_IncTick+0x20>)
 8000642:	6013      	str	r3, [r2, #0]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	20000008 	.word	0x20000008
 8000650:	200000e8 	.word	0x200000e8

08000654 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return uwTick;
 8000658:	4b02      	ldr	r3, [pc, #8]	@ (8000664 <HAL_GetTick+0x10>)
 800065a:	681b      	ldr	r3, [r3, #0]
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	200000e8 	.word	0x200000e8

08000668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000670:	f7ff fff0 	bl	8000654 <HAL_GetTick>
 8000674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000680:	d005      	beq.n	800068e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000682:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <HAL_Delay+0x44>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4413      	add	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068e:	bf00      	nop
 8000690:	f7ff ffe0 	bl	8000654 <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	429a      	cmp	r2, r3
 800069e:	d8f7      	bhi.n	8000690 <HAL_Delay+0x28>
  {
  }
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000008 	.word	0x20000008

080006b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e2:	4a04      	ldr	r2, [pc, #16]	@ (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	60d3      	str	r3, [r2, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <__NVIC_GetPriorityGrouping+0x18>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	f003 0307 	and.w	r3, r3, #7
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	2b00      	cmp	r3, #0
 8000724:	db0b      	blt.n	800073e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f003 021f 	and.w	r2, r3, #31
 800072c:	4906      	ldr	r1, [pc, #24]	@ (8000748 <__NVIC_EnableIRQ+0x34>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	095b      	lsrs	r3, r3, #5
 8000734:	2001      	movs	r0, #1
 8000736:	fa00 f202 	lsl.w	r2, r0, r2
 800073a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	@ (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	@ (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	@ 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	@ 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000814:	d301      	bcc.n	800081a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000816:	2301      	movs	r3, #1
 8000818:	e00f      	b.n	800083a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081a:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <SysTick_Config+0x40>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000822:	210f      	movs	r1, #15
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f7ff ff90 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <SysTick_Config+0x40>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000832:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <SysTick_Config+0x40>)
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff2d 	bl	80006b0 <__NVIC_SetPriorityGrouping>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000870:	f7ff ff42 	bl	80006f8 <__NVIC_GetPriorityGrouping>
 8000874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	6978      	ldr	r0, [r7, #20]
 800087c:	f7ff ff90 	bl	80007a0 <NVIC_EncodePriority>
 8000880:	4602      	mov	r2, r0
 8000882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff5f 	bl	800074c <__NVIC_SetPriority>
}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff35 	bl	8000714 <__NVIC_EnableIRQ>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffa2 	bl	8000804 <SysTick_Config>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008ce:	f000 ffc7 	bl	8001860 <HAL_SYSTICK_Callback>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d8:	b480      	push	{r7}
 80008da:	b08b      	sub	sp, #44	@ 0x2c
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ea:	e169      	b.n	8000bc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008ec:	2201      	movs	r2, #1
 80008ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	69fa      	ldr	r2, [r7, #28]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	429a      	cmp	r2, r3
 8000906:	f040 8158 	bne.w	8000bba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	4a9a      	ldr	r2, [pc, #616]	@ (8000b78 <HAL_GPIO_Init+0x2a0>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d05e      	beq.n	80009d2 <HAL_GPIO_Init+0xfa>
 8000914:	4a98      	ldr	r2, [pc, #608]	@ (8000b78 <HAL_GPIO_Init+0x2a0>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d875      	bhi.n	8000a06 <HAL_GPIO_Init+0x12e>
 800091a:	4a98      	ldr	r2, [pc, #608]	@ (8000b7c <HAL_GPIO_Init+0x2a4>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d058      	beq.n	80009d2 <HAL_GPIO_Init+0xfa>
 8000920:	4a96      	ldr	r2, [pc, #600]	@ (8000b7c <HAL_GPIO_Init+0x2a4>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d86f      	bhi.n	8000a06 <HAL_GPIO_Init+0x12e>
 8000926:	4a96      	ldr	r2, [pc, #600]	@ (8000b80 <HAL_GPIO_Init+0x2a8>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d052      	beq.n	80009d2 <HAL_GPIO_Init+0xfa>
 800092c:	4a94      	ldr	r2, [pc, #592]	@ (8000b80 <HAL_GPIO_Init+0x2a8>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d869      	bhi.n	8000a06 <HAL_GPIO_Init+0x12e>
 8000932:	4a94      	ldr	r2, [pc, #592]	@ (8000b84 <HAL_GPIO_Init+0x2ac>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d04c      	beq.n	80009d2 <HAL_GPIO_Init+0xfa>
 8000938:	4a92      	ldr	r2, [pc, #584]	@ (8000b84 <HAL_GPIO_Init+0x2ac>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d863      	bhi.n	8000a06 <HAL_GPIO_Init+0x12e>
 800093e:	4a92      	ldr	r2, [pc, #584]	@ (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d046      	beq.n	80009d2 <HAL_GPIO_Init+0xfa>
 8000944:	4a90      	ldr	r2, [pc, #576]	@ (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d85d      	bhi.n	8000a06 <HAL_GPIO_Init+0x12e>
 800094a:	2b12      	cmp	r3, #18
 800094c:	d82a      	bhi.n	80009a4 <HAL_GPIO_Init+0xcc>
 800094e:	2b12      	cmp	r3, #18
 8000950:	d859      	bhi.n	8000a06 <HAL_GPIO_Init+0x12e>
 8000952:	a201      	add	r2, pc, #4	@ (adr r2, 8000958 <HAL_GPIO_Init+0x80>)
 8000954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000958:	080009d3 	.word	0x080009d3
 800095c:	080009ad 	.word	0x080009ad
 8000960:	080009bf 	.word	0x080009bf
 8000964:	08000a01 	.word	0x08000a01
 8000968:	08000a07 	.word	0x08000a07
 800096c:	08000a07 	.word	0x08000a07
 8000970:	08000a07 	.word	0x08000a07
 8000974:	08000a07 	.word	0x08000a07
 8000978:	08000a07 	.word	0x08000a07
 800097c:	08000a07 	.word	0x08000a07
 8000980:	08000a07 	.word	0x08000a07
 8000984:	08000a07 	.word	0x08000a07
 8000988:	08000a07 	.word	0x08000a07
 800098c:	08000a07 	.word	0x08000a07
 8000990:	08000a07 	.word	0x08000a07
 8000994:	08000a07 	.word	0x08000a07
 8000998:	08000a07 	.word	0x08000a07
 800099c:	080009b5 	.word	0x080009b5
 80009a0:	080009c9 	.word	0x080009c9
 80009a4:	4a79      	ldr	r2, [pc, #484]	@ (8000b8c <HAL_GPIO_Init+0x2b4>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d013      	beq.n	80009d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009aa:	e02c      	b.n	8000a06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	623b      	str	r3, [r7, #32]
          break;
 80009b2:	e029      	b.n	8000a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	3304      	adds	r3, #4
 80009ba:	623b      	str	r3, [r7, #32]
          break;
 80009bc:	e024      	b.n	8000a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	3308      	adds	r3, #8
 80009c4:	623b      	str	r3, [r7, #32]
          break;
 80009c6:	e01f      	b.n	8000a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	330c      	adds	r3, #12
 80009ce:	623b      	str	r3, [r7, #32]
          break;
 80009d0:	e01a      	b.n	8000a08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d102      	bne.n	80009e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009da:	2304      	movs	r3, #4
 80009dc:	623b      	str	r3, [r7, #32]
          break;
 80009de:	e013      	b.n	8000a08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d105      	bne.n	80009f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009e8:	2308      	movs	r3, #8
 80009ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	69fa      	ldr	r2, [r7, #28]
 80009f0:	611a      	str	r2, [r3, #16]
          break;
 80009f2:	e009      	b.n	8000a08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f4:	2308      	movs	r3, #8
 80009f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	69fa      	ldr	r2, [r7, #28]
 80009fc:	615a      	str	r2, [r3, #20]
          break;
 80009fe:	e003      	b.n	8000a08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
          break;
 8000a04:	e000      	b.n	8000a08 <HAL_GPIO_Init+0x130>
          break;
 8000a06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	2bff      	cmp	r3, #255	@ 0xff
 8000a0c:	d801      	bhi.n	8000a12 <HAL_GPIO_Init+0x13a>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	e001      	b.n	8000a16 <HAL_GPIO_Init+0x13e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3304      	adds	r3, #4
 8000a16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	2bff      	cmp	r3, #255	@ 0xff
 8000a1c:	d802      	bhi.n	8000a24 <HAL_GPIO_Init+0x14c>
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	e002      	b.n	8000a2a <HAL_GPIO_Init+0x152>
 8000a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a26:	3b08      	subs	r3, #8
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	210f      	movs	r1, #15
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	6a39      	ldr	r1, [r7, #32]
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	fa01 f303 	lsl.w	r3, r1, r3
 8000a44:	431a      	orrs	r2, r3
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 80b1 	beq.w	8000bba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a58:	4b4d      	ldr	r3, [pc, #308]	@ (8000b90 <HAL_GPIO_Init+0x2b8>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000b90 <HAL_GPIO_Init+0x2b8>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b4a      	ldr	r3, [pc, #296]	@ (8000b90 <HAL_GPIO_Init+0x2b8>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a70:	4a48      	ldr	r2, [pc, #288]	@ (8000b94 <HAL_GPIO_Init+0x2bc>)
 8000a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a74:	089b      	lsrs	r3, r3, #2
 8000a76:	3302      	adds	r3, #2
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	220f      	movs	r2, #15
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a40      	ldr	r2, [pc, #256]	@ (8000b98 <HAL_GPIO_Init+0x2c0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d013      	beq.n	8000ac4 <HAL_GPIO_Init+0x1ec>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b9c <HAL_GPIO_Init+0x2c4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d00d      	beq.n	8000ac0 <HAL_GPIO_Init+0x1e8>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ba0 <HAL_GPIO_Init+0x2c8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d007      	beq.n	8000abc <HAL_GPIO_Init+0x1e4>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a3d      	ldr	r2, [pc, #244]	@ (8000ba4 <HAL_GPIO_Init+0x2cc>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d101      	bne.n	8000ab8 <HAL_GPIO_Init+0x1e0>
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	e006      	b.n	8000ac6 <HAL_GPIO_Init+0x1ee>
 8000ab8:	2304      	movs	r3, #4
 8000aba:	e004      	b.n	8000ac6 <HAL_GPIO_Init+0x1ee>
 8000abc:	2302      	movs	r3, #2
 8000abe:	e002      	b.n	8000ac6 <HAL_GPIO_Init+0x1ee>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <HAL_GPIO_Init+0x1ee>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ac8:	f002 0203 	and.w	r2, r2, #3
 8000acc:	0092      	lsls	r2, r2, #2
 8000ace:	4093      	lsls	r3, r2
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ad6:	492f      	ldr	r1, [pc, #188]	@ (8000b94 <HAL_GPIO_Init+0x2bc>)
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ada:	089b      	lsrs	r3, r3, #2
 8000adc:	3302      	adds	r3, #2
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d006      	beq.n	8000afe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000af0:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000af2:	689a      	ldr	r2, [r3, #8]
 8000af4:	492c      	ldr	r1, [pc, #176]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	608b      	str	r3, [r1, #8]
 8000afc:	e006      	b.n	8000b0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000afe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	4928      	ldr	r1, [pc, #160]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d006      	beq.n	8000b26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b18:	4b23      	ldr	r3, [pc, #140]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	4922      	ldr	r1, [pc, #136]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	60cb      	str	r3, [r1, #12]
 8000b24:	e006      	b.n	8000b34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b26:	4b20      	ldr	r3, [pc, #128]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	491e      	ldr	r1, [pc, #120]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000b30:	4013      	ands	r3, r2
 8000b32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d006      	beq.n	8000b4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	4918      	ldr	r1, [pc, #96]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	604b      	str	r3, [r1, #4]
 8000b4c:	e006      	b.n	8000b5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4914      	ldr	r1, [pc, #80]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d021      	beq.n	8000bac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	490e      	ldr	r1, [pc, #56]	@ (8000ba8 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	600b      	str	r3, [r1, #0]
 8000b74:	e021      	b.n	8000bba <HAL_GPIO_Init+0x2e2>
 8000b76:	bf00      	nop
 8000b78:	10320000 	.word	0x10320000
 8000b7c:	10310000 	.word	0x10310000
 8000b80:	10220000 	.word	0x10220000
 8000b84:	10210000 	.word	0x10210000
 8000b88:	10120000 	.word	0x10120000
 8000b8c:	10110000 	.word	0x10110000
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010000 	.word	0x40010000
 8000b98:	40010800 	.word	0x40010800
 8000b9c:	40010c00 	.word	0x40010c00
 8000ba0:	40011000 	.word	0x40011000
 8000ba4:	40011400 	.word	0x40011400
 8000ba8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bac:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <HAL_GPIO_Init+0x304>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	4909      	ldr	r1, [pc, #36]	@ (8000bdc <HAL_GPIO_Init+0x304>)
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f47f ae8e 	bne.w	80008ec <HAL_GPIO_Init+0x14>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	372c      	adds	r7, #44	@ 0x2c
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	40010400 	.word	0x40010400

08000be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	807b      	strh	r3, [r7, #2]
 8000bec:	4613      	mov	r3, r2
 8000bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf0:	787b      	ldrb	r3, [r7, #1]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bf6:	887a      	ldrh	r2, [r7, #2]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bfc:	e003      	b.n	8000c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	041a      	lsls	r2, r3, #16
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	611a      	str	r2, [r3, #16]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c1c:	695a      	ldr	r2, [r3, #20]
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d006      	beq.n	8000c34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f806 	bl	8000c40 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40010400 	.word	0x40010400

08000c40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e272      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 8087 	beq.w	8000d82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c74:	4b92      	ldr	r3, [pc, #584]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 030c 	and.w	r3, r3, #12
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d00c      	beq.n	8000c9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c80:	4b8f      	ldr	r3, [pc, #572]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 030c 	and.w	r3, r3, #12
 8000c88:	2b08      	cmp	r3, #8
 8000c8a:	d112      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x5e>
 8000c8c:	4b8c      	ldr	r3, [pc, #560]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c98:	d10b      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c9a:	4b89      	ldr	r3, [pc, #548]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d06c      	beq.n	8000d80 <HAL_RCC_OscConfig+0x12c>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d168      	bne.n	8000d80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e24c      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cba:	d106      	bne.n	8000cca <HAL_RCC_OscConfig+0x76>
 8000cbc:	4b80      	ldr	r3, [pc, #512]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a7f      	ldr	r2, [pc, #508]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	e02e      	b.n	8000d28 <HAL_RCC_OscConfig+0xd4>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10c      	bne.n	8000cec <HAL_RCC_OscConfig+0x98>
 8000cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a7a      	ldr	r2, [pc, #488]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	4b78      	ldr	r3, [pc, #480]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a77      	ldr	r2, [pc, #476]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e01d      	b.n	8000d28 <HAL_RCC_OscConfig+0xd4>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cf4:	d10c      	bne.n	8000d10 <HAL_RCC_OscConfig+0xbc>
 8000cf6:	4b72      	ldr	r3, [pc, #456]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a71      	ldr	r2, [pc, #452]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	4b6f      	ldr	r3, [pc, #444]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a6e      	ldr	r2, [pc, #440]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e00b      	b.n	8000d28 <HAL_RCC_OscConfig+0xd4>
 8000d10:	4b6b      	ldr	r3, [pc, #428]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a6a      	ldr	r2, [pc, #424]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	4b68      	ldr	r3, [pc, #416]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a67      	ldr	r2, [pc, #412]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d013      	beq.n	8000d58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fc90 	bl	8000654 <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d38:	f7ff fc8c 	bl	8000654 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b64      	cmp	r3, #100	@ 0x64
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e200      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f0      	beq.n	8000d38 <HAL_RCC_OscConfig+0xe4>
 8000d56:	e014      	b.n	8000d82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d58:	f7ff fc7c 	bl	8000654 <HAL_GetTick>
 8000d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5e:	e008      	b.n	8000d72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d60:	f7ff fc78 	bl	8000654 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b64      	cmp	r3, #100	@ 0x64
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e1ec      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d72:	4b53      	ldr	r3, [pc, #332]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f0      	bne.n	8000d60 <HAL_RCC_OscConfig+0x10c>
 8000d7e:	e000      	b.n	8000d82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d063      	beq.n	8000e56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 030c 	and.w	r3, r3, #12
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d00b      	beq.n	8000db2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d9a:	4b49      	ldr	r3, [pc, #292]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
 8000da2:	2b08      	cmp	r3, #8
 8000da4:	d11c      	bne.n	8000de0 <HAL_RCC_OscConfig+0x18c>
 8000da6:	4b46      	ldr	r3, [pc, #280]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d116      	bne.n	8000de0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db2:	4b43      	ldr	r3, [pc, #268]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <HAL_RCC_OscConfig+0x176>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d001      	beq.n	8000dca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e1c0      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dca:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4939      	ldr	r1, [pc, #228]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dde:	e03a      	b.n	8000e56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d020      	beq.n	8000e2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000de8:	4b36      	ldr	r3, [pc, #216]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dee:	f7ff fc31 	bl	8000654 <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000df6:	f7ff fc2d 	bl	8000654 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e1a1      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e08:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f0      	beq.n	8000df6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e14:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	4927      	ldr	r1, [pc, #156]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	4313      	orrs	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
 8000e28:	e015      	b.n	8000e56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e2a:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e30:	f7ff fc10 	bl	8000654 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e38:	f7ff fc0c 	bl	8000654 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e180      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f0      	bne.n	8000e38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d03a      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d019      	beq.n	8000e9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <HAL_RCC_OscConfig+0x274>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e70:	f7ff fbf0 	bl	8000654 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e78:	f7ff fbec 	bl	8000654 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e160      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f0      	beq.n	8000e78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f000 face 	bl	8001438 <RCC_Delay>
 8000e9c:	e01c      	b.n	8000ed8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_RCC_OscConfig+0x274>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea4:	f7ff fbd6 	bl	8000654 <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eaa:	e00f      	b.n	8000ecc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eac:	f7ff fbd2 	bl	8000654 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d908      	bls.n	8000ecc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e146      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	42420000 	.word	0x42420000
 8000ec8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ecc:	4b92      	ldr	r3, [pc, #584]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1e9      	bne.n	8000eac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 80a6 	beq.w	8001032 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eea:	4b8b      	ldr	r3, [pc, #556]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10d      	bne.n	8000f12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b88      	ldr	r3, [pc, #544]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a87      	ldr	r2, [pc, #540]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b85      	ldr	r3, [pc, #532]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f12:	4b82      	ldr	r3, [pc, #520]	@ (800111c <HAL_RCC_OscConfig+0x4c8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d118      	bne.n	8000f50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800111c <HAL_RCC_OscConfig+0x4c8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a7e      	ldr	r2, [pc, #504]	@ (800111c <HAL_RCC_OscConfig+0x4c8>)
 8000f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fb93 	bl	8000654 <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f32:	f7ff fb8f 	bl	8000654 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b64      	cmp	r3, #100	@ 0x64
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e103      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f44:	4b75      	ldr	r3, [pc, #468]	@ (800111c <HAL_RCC_OscConfig+0x4c8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f0      	beq.n	8000f32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d106      	bne.n	8000f66 <HAL_RCC_OscConfig+0x312>
 8000f58:	4b6f      	ldr	r3, [pc, #444]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	4a6e      	ldr	r2, [pc, #440]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6213      	str	r3, [r2, #32]
 8000f64:	e02d      	b.n	8000fc2 <HAL_RCC_OscConfig+0x36e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x334>
 8000f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	4a69      	ldr	r2, [pc, #420]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	6213      	str	r3, [r2, #32]
 8000f7a:	4b67      	ldr	r3, [pc, #412]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	4a66      	ldr	r2, [pc, #408]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	f023 0304 	bic.w	r3, r3, #4
 8000f84:	6213      	str	r3, [r2, #32]
 8000f86:	e01c      	b.n	8000fc2 <HAL_RCC_OscConfig+0x36e>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d10c      	bne.n	8000faa <HAL_RCC_OscConfig+0x356>
 8000f90:	4b61      	ldr	r3, [pc, #388]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	4a60      	ldr	r2, [pc, #384]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6213      	str	r3, [r2, #32]
 8000f9c:	4b5e      	ldr	r3, [pc, #376]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	4a5d      	ldr	r2, [pc, #372]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6213      	str	r3, [r2, #32]
 8000fa8:	e00b      	b.n	8000fc2 <HAL_RCC_OscConfig+0x36e>
 8000faa:	4b5b      	ldr	r3, [pc, #364]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	4a5a      	ldr	r2, [pc, #360]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	f023 0301 	bic.w	r3, r3, #1
 8000fb4:	6213      	str	r3, [r2, #32]
 8000fb6:	4b58      	ldr	r3, [pc, #352]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	4a57      	ldr	r2, [pc, #348]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	f023 0304 	bic.w	r3, r3, #4
 8000fc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d015      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fca:	f7ff fb43 	bl	8000654 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd0:	e00a      	b.n	8000fe8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fd2:	f7ff fb3f 	bl	8000654 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e0b1      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0ee      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x37e>
 8000ff4:	e014      	b.n	8001020 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fb2d 	bl	8000654 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffc:	e00a      	b.n	8001014 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ffe:	f7ff fb29 	bl	8000654 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800100c:	4293      	cmp	r3, r2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e09b      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001014:	4b40      	ldr	r3, [pc, #256]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1ee      	bne.n	8000ffe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d105      	bne.n	8001032 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001026:	4b3c      	ldr	r3, [pc, #240]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a3b      	ldr	r2, [pc, #236]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001030:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8087 	beq.w	800114a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800103c:	4b36      	ldr	r3, [pc, #216]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b08      	cmp	r3, #8
 8001046:	d061      	beq.n	800110c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d146      	bne.n	80010de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001050:	4b33      	ldr	r3, [pc, #204]	@ (8001120 <HAL_RCC_OscConfig+0x4cc>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fafd 	bl	8000654 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800105e:	f7ff faf9 	bl	8000654 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e06d      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001070:	4b29      	ldr	r3, [pc, #164]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f0      	bne.n	800105e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001084:	d108      	bne.n	8001098 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001086:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	4921      	ldr	r1, [pc, #132]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	4313      	orrs	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a19      	ldr	r1, [r3, #32]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a8:	430b      	orrs	r3, r1
 80010aa:	491b      	ldr	r1, [pc, #108]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <HAL_RCC_OscConfig+0x4cc>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff facd 	bl	8000654 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010be:	f7ff fac9 	bl	8000654 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e03d      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x46a>
 80010dc:	e035      	b.n	800114a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <HAL_RCC_OscConfig+0x4cc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fab6 	bl	8000654 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ec:	f7ff fab2 	bl	8000654 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e026      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_RCC_OscConfig+0x4c4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x498>
 800110a:	e01e      	b.n	800114a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d107      	bne.n	8001124 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e019      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
 8001118:	40021000 	.word	0x40021000
 800111c:	40007000 	.word	0x40007000
 8001120:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <HAL_RCC_OscConfig+0x500>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	429a      	cmp	r2, r3
 8001136:	d106      	bne.n	8001146 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001142:	429a      	cmp	r2, r3
 8001144:	d001      	beq.n	800114a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021000 	.word	0x40021000

08001158 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0d0      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800116c:	4b6a      	ldr	r3, [pc, #424]	@ (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d910      	bls.n	800119c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117a:	4b67      	ldr	r3, [pc, #412]	@ (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 0207 	bic.w	r2, r3, #7
 8001182:	4965      	ldr	r1, [pc, #404]	@ (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	4313      	orrs	r3, r2
 8001188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800118a:	4b63      	ldr	r3, [pc, #396]	@ (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d001      	beq.n	800119c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0b8      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d020      	beq.n	80011ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b4:	4b59      	ldr	r3, [pc, #356]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a58      	ldr	r2, [pc, #352]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011cc:	4b53      	ldr	r3, [pc, #332]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4a52      	ldr	r2, [pc, #328]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d8:	4b50      	ldr	r3, [pc, #320]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	494d      	ldr	r1, [pc, #308]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d040      	beq.n	8001278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d107      	bne.n	800120e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	4b47      	ldr	r3, [pc, #284]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d115      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e07f      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d107      	bne.n	8001226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001216:	4b41      	ldr	r3, [pc, #260]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e073      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001226:	4b3d      	ldr	r3, [pc, #244]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e06b      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001236:	4b39      	ldr	r3, [pc, #228]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f023 0203 	bic.w	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4936      	ldr	r1, [pc, #216]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001248:	f7ff fa04 	bl	8000654 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124e:	e00a      	b.n	8001266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001250:	f7ff fa00 	bl	8000654 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800125e:	4293      	cmp	r3, r2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e053      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001266:	4b2d      	ldr	r3, [pc, #180]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 020c 	and.w	r2, r3, #12
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	429a      	cmp	r2, r3
 8001276:	d1eb      	bne.n	8001250 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001278:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d210      	bcs.n	80012a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 0207 	bic.w	r2, r3, #7
 800128e:	4922      	ldr	r1, [pc, #136]	@ (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e032      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d008      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4916      	ldr	r1, [pc, #88]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d009      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012d2:	4b12      	ldr	r3, [pc, #72]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	490e      	ldr	r1, [pc, #56]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012e6:	f000 f821 	bl	800132c <HAL_RCC_GetSysClockFreq>
 80012ea:	4602      	mov	r2, r0
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	490a      	ldr	r1, [pc, #40]	@ (8001320 <HAL_RCC_ClockConfig+0x1c8>)
 80012f8:	5ccb      	ldrb	r3, [r1, r3]
 80012fa:	fa22 f303 	lsr.w	r3, r2, r3
 80012fe:	4a09      	ldr	r2, [pc, #36]	@ (8001324 <HAL_RCC_ClockConfig+0x1cc>)
 8001300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <HAL_RCC_ClockConfig+0x1d0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f962 	bl	80005d0 <HAL_InitTick>

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40022000 	.word	0x40022000
 800131c:	40021000 	.word	0x40021000
 8001320:	08003830 	.word	0x08003830
 8001324:	20000000 	.word	0x20000000
 8001328:	20000004 	.word	0x20000004

0800132c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001346:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b04      	cmp	r3, #4
 8001354:	d002      	beq.n	800135c <HAL_RCC_GetSysClockFreq+0x30>
 8001356:	2b08      	cmp	r3, #8
 8001358:	d003      	beq.n	8001362 <HAL_RCC_GetSysClockFreq+0x36>
 800135a:	e027      	b.n	80013ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800135e:	613b      	str	r3, [r7, #16]
      break;
 8001360:	e027      	b.n	80013b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	0c9b      	lsrs	r3, r3, #18
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d010      	beq.n	800139c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	0c5b      	lsrs	r3, r3, #17
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	4a11      	ldr	r2, [pc, #68]	@ (80013cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800138e:	fb03 f202 	mul.w	r2, r3, r2
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	fbb2 f3f3 	udiv	r3, r2, r3
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e004      	b.n	80013a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013a0:	fb02 f303 	mul.w	r3, r2, r3
 80013a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	613b      	str	r3, [r7, #16]
      break;
 80013aa:	e002      	b.n	80013b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ae:	613b      	str	r3, [r7, #16]
      break;
 80013b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013b2:	693b      	ldr	r3, [r7, #16]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	371c      	adds	r7, #28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	007a1200 	.word	0x007a1200
 80013c8:	08003848 	.word	0x08003848
 80013cc:	08003858 	.word	0x08003858
 80013d0:	003d0900 	.word	0x003d0900

080013d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d8:	4b02      	ldr	r3, [pc, #8]	@ (80013e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	20000000 	.word	0x20000000

080013e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013ec:	f7ff fff2 	bl	80013d4 <HAL_RCC_GetHCLKFreq>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	4903      	ldr	r1, [pc, #12]	@ (800140c <HAL_RCC_GetPCLK1Freq+0x24>)
 80013fe:	5ccb      	ldrb	r3, [r1, r3]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000
 800140c:	08003840 	.word	0x08003840

08001410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001414:	f7ff ffde 	bl	80013d4 <HAL_RCC_GetHCLKFreq>
 8001418:	4602      	mov	r2, r0
 800141a:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	0adb      	lsrs	r3, r3, #11
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	4903      	ldr	r1, [pc, #12]	@ (8001434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001426:	5ccb      	ldrb	r3, [r1, r3]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800142c:	4618      	mov	r0, r3
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	08003840 	.word	0x08003840

08001438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <RCC_Delay+0x34>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <RCC_Delay+0x38>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0a5b      	lsrs	r3, r3, #9
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001454:	bf00      	nop
  }
  while (Delay --);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	60fa      	str	r2, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f9      	bne.n	8001454 <RCC_Delay+0x1c>
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	20000000 	.word	0x20000000
 8001470:	10624dd3 	.word	0x10624dd3

08001474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e042      	b.n	800150c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d106      	bne.n	80014a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7fe ffac 	bl	80003f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2224      	movs	r2, #36	@ 0x24
 80014a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80014b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f82b 	bl	8001514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80014cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80014dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80014ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2220      	movs	r2, #32
 80014f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2220      	movs	r2, #32
 8001500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	4313      	orrs	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800154e:	f023 030c 	bic.w	r3, r3, #12
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	430b      	orrs	r3, r1
 800155a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699a      	ldr	r2, [r3, #24]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a2c      	ldr	r2, [pc, #176]	@ (8001628 <UART_SetConfig+0x114>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d103      	bne.n	8001584 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800157c:	f7ff ff48 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	e002      	b.n	800158a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001584:	f7ff ff30 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 8001588:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	009a      	lsls	r2, r3, #2
 8001594:	441a      	add	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a0:	4a22      	ldr	r2, [pc, #136]	@ (800162c <UART_SetConfig+0x118>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	0119      	lsls	r1, r3, #4
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	009a      	lsls	r2, r3, #2
 80015b4:	441a      	add	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <UART_SetConfig+0x118>)
 80015c2:	fba3 0302 	umull	r0, r3, r3, r2
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2064      	movs	r0, #100	@ 0x64
 80015ca:	fb00 f303 	mul.w	r3, r0, r3
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	3332      	adds	r3, #50	@ 0x32
 80015d4:	4a15      	ldr	r2, [pc, #84]	@ (800162c <UART_SetConfig+0x118>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015e0:	4419      	add	r1, r3
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	009a      	lsls	r2, r3, #2
 80015ec:	441a      	add	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <UART_SetConfig+0x118>)
 80015fa:	fba3 0302 	umull	r0, r3, r3, r2
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2064      	movs	r0, #100	@ 0x64
 8001602:	fb00 f303 	mul.w	r3, r0, r3
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	3332      	adds	r3, #50	@ 0x32
 800160c:	4a07      	ldr	r2, [pc, #28]	@ (800162c <UART_SetConfig+0x118>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	f003 020f 	and.w	r2, r3, #15
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	440a      	add	r2, r1
 800161e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40013800 	.word	0x40013800
 800162c:	51eb851f 	.word	0x51eb851f

08001630 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b085      	sub	sp, #20
 8001634:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 8001636:	b672      	cpsid	i
 8001638:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <app_init+0x134>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a4a      	ldr	r2, [pc, #296]	@ (8001768 <app_init+0x138>)
 800163e:	213f      	movs	r1, #63	@ 0x3f
 8001640:	4618      	mov	r0, r3
 8001642:	f001 f883 	bl	800274c <sniprintf>
 8001646:	4603      	mov	r3, r0
 8001648:	4a48      	ldr	r2, [pc, #288]	@ (800176c <app_init+0x13c>)
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b45      	ldr	r3, [pc, #276]	@ (8001764 <app_init+0x134>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fb45 	bl	8001ce0 <logger_log_print_>
 8001656:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %lu\r\n", GET_NAME(app_init), HAL_GetTick());
 8001658:	b672      	cpsid	i
 800165a:	4b42      	ldr	r3, [pc, #264]	@ (8001764 <app_init+0x134>)
 800165c:	681c      	ldr	r4, [r3, #0]
 800165e:	f7fe fff9 	bl	8000654 <HAL_GetTick>
 8001662:	4603      	mov	r3, r0
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	4b42      	ldr	r3, [pc, #264]	@ (8001770 <app_init+0x140>)
 8001668:	4a42      	ldr	r2, [pc, #264]	@ (8001774 <app_init+0x144>)
 800166a:	213f      	movs	r1, #63	@ 0x3f
 800166c:	4620      	mov	r0, r4
 800166e:	f001 f86d 	bl	800274c <sniprintf>
 8001672:	4603      	mov	r3, r0
 8001674:	4a3d      	ldr	r2, [pc, #244]	@ (800176c <app_init+0x13c>)
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b3a      	ldr	r3, [pc, #232]	@ (8001764 <app_init+0x134>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fb2f 	bl	8001ce0 <logger_log_print_>
 8001682:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8001684:	b672      	cpsid	i
 8001686:	4b37      	ldr	r3, [pc, #220]	@ (8001764 <app_init+0x134>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a3b      	ldr	r2, [pc, #236]	@ (8001778 <app_init+0x148>)
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	213f      	movs	r1, #63	@ 0x3f
 8001690:	4618      	mov	r0, r3
 8001692:	f001 f85b 	bl	800274c <sniprintf>
 8001696:	4603      	mov	r3, r0
 8001698:	4a34      	ldr	r2, [pc, #208]	@ (800176c <app_init+0x13c>)
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b31      	ldr	r3, [pc, #196]	@ (8001764 <app_init+0x134>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fb1d 	bl	8001ce0 <logger_log_print_>
 80016a6:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 80016a8:	b672      	cpsid	i
 80016aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001764 <app_init+0x134>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a33      	ldr	r2, [pc, #204]	@ (800177c <app_init+0x14c>)
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	213f      	movs	r1, #63	@ 0x3f
 80016b4:	4618      	mov	r0, r3
 80016b6:	f001 f849 	bl	800274c <sniprintf>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a2b      	ldr	r2, [pc, #172]	@ (800176c <app_init+0x13c>)
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b28      	ldr	r3, [pc, #160]	@ (8001764 <app_init+0x134>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 fb0b 	bl	8001ce0 <logger_log_print_>
 80016ca:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 80016cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <app_init+0x150>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);
 80016d2:	b672      	cpsid	i
 80016d4:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <app_init+0x134>)
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <app_init+0x150>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <app_init+0x154>)
 80016e0:	4a29      	ldr	r2, [pc, #164]	@ (8001788 <app_init+0x158>)
 80016e2:	213f      	movs	r1, #63	@ 0x3f
 80016e4:	f001 f832 	bl	800274c <sniprintf>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a20      	ldr	r2, [pc, #128]	@ (800176c <app_init+0x13c>)
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <app_init+0x134>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 faf4 	bl	8001ce0 <logger_log_print_>
 80016f8:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	e012      	b.n	8001726 <app_init+0xf6>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8001700:	4922      	ldr	r1, [pc, #136]	@ (800178c <app_init+0x15c>)
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2200      	movs	r2, #0
 8001712:	4610      	mov	r0, r2
 8001714:	4798      	blx	r3

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 8001716:	4a1e      	ldr	r2, [pc, #120]	@ (8001790 <app_init+0x160>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2100      	movs	r1, #0
 800171c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3301      	adds	r3, #1
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0e9      	beq.n	8001700 <app_init+0xd0>
	}

	cycle_counter_init();
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <app_init+0x164>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4a18      	ldr	r2, [pc, #96]	@ (8001794 <app_init+0x164>)
 8001732:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001736:	60d3      	str	r3, [r2, #12]
 8001738:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <app_init+0x168>)
 800173a:	2200      	movs	r2, #0
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <app_init+0x168>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a15      	ldr	r2, [pc, #84]	@ (8001798 <app_init+0x168>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6013      	str	r3, [r2, #0]

	__asm("CPSID i");	/* disable interrupts*/
 800174a:	b672      	cpsid	i
	g_app_tick_cnt = G_APP_TICK_CNT_INI;
 800174c:	4b13      	ldr	r3, [pc, #76]	@ (800179c <app_init+0x16c>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
	g_task_test_tick_cnt = G_APP_TICK_CNT_INI;
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <app_init+0x170>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
    __asm("CPSIE i");	/* enable interrupts*/
 8001758:	b662      	cpsie	i
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	08003868 	.word	0x08003868
 8001768:	08003700 	.word	0x08003700
 800176c:	20000140 	.word	0x20000140
 8001770:	08003704 	.word	0x08003704
 8001774:	08003710 	.word	0x08003710
 8001778:	2000000c 	.word	0x2000000c
 800177c:	20000010 	.word	0x20000010
 8001780:	200000ec 	.word	0x200000ec
 8001784:	08003734 	.word	0x08003734
 8001788:	08003740 	.word	0x08003740
 800178c:	0800385c 	.word	0x0800385c
 8001790:	200000f8 	.word	0x200000f8
 8001794:	e000edf0 	.word	0xe000edf0
 8001798:	e0001000 	.word	0xe0001000
 800179c:	200000f4 	.word	0x200000f4
 80017a0:	2000014c 	.word	0x2000014c

080017a4 <app_update>:

void app_update(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 80017aa:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <app_update+0x9c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d041      	beq.n	8001836 <app_update+0x92>
    {
    	g_app_tick_cnt--;
 80017b2:	4b23      	ldr	r3, [pc, #140]	@ (8001840 <app_update+0x9c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	4a21      	ldr	r2, [pc, #132]	@ (8001840 <app_update+0x9c>)
 80017ba:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 80017bc:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <app_update+0xa0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3301      	adds	r3, #1
 80017c2:	4a20      	ldr	r2, [pc, #128]	@ (8001844 <app_update+0xa0>)
 80017c4:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 80017c6:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <app_update+0xa4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	e02e      	b.n	8001830 <app_update+0x8c>
    	{
			cycle_counter_reset();
 80017d2:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <app_update+0xa8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 80017d8:	491d      	ldr	r1, [pc, #116]	@ (8001850 <app_update+0xac>)
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3304      	adds	r3, #4
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2200      	movs	r2, #0
 80017ec:	4610      	mov	r0, r2
 80017ee:	4798      	blx	r3

			cycle_counter_time_us = cycle_counter_time_us();
 80017f0:	4b16      	ldr	r3, [pc, #88]	@ (800184c <app_update+0xa8>)
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <app_update+0xb0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4917      	ldr	r1, [pc, #92]	@ (8001858 <app_update+0xb4>)
 80017fa:	fba1 1303 	umull	r1, r3, r1, r3
 80017fe:	0c9b      	lsrs	r3, r3, #18
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	603b      	str	r3, [r7, #0]

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <app_update+0xa4>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	4413      	add	r3, r2
 800180e:	4a0e      	ldr	r2, [pc, #56]	@ (8001848 <app_update+0xa4>)
 8001810:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <app_update+0xb8>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d904      	bls.n	800182a <app_update+0x86>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 8001820:	490e      	ldr	r1, [pc, #56]	@ (800185c <app_update+0xb8>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	for (index = 0; TASK_QTY > index; index++)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3301      	adds	r3, #1
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0cd      	beq.n	80017d2 <app_update+0x2e>
			}
	    }
    }
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200000f4 	.word	0x200000f4
 8001844:	200000ec 	.word	0x200000ec
 8001848:	200000f0 	.word	0x200000f0
 800184c:	e0001000 	.word	0xe0001000
 8001850:	0800385c 	.word	0x0800385c
 8001854:	20000000 	.word	0x20000000
 8001858:	431bde83 	.word	0x431bde83
 800185c:	200000f8 	.word	0x200000f8

08001860 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_SYSTICK_Callback+0x20>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <HAL_SYSTICK_Callback+0x20>)
 800186c:	6013      	str	r3, [r2, #0]

	g_task_test_tick_cnt++;
 800186e:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_SYSTICK_Callback+0x24>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	4a03      	ldr	r2, [pc, #12]	@ (8001884 <HAL_SYSTICK_Callback+0x24>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	200000f4 	.word	0x200000f4
 8001884:	2000014c 	.word	0x2000014c

08001888 <delay_us>:
static void displayPinWrite( uint8_t pinName, int value );
static void displayDataBusWrite( uint8_t dataByte );
static void displayCodeWrite( bool type, uint8_t dataBus );


void delay_us(int delay){
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	uint32_t t_ini = cycle_counter_time_us();
 8001890:	4b16      	ldr	r3, [pc, #88]	@ (80018ec <delay_us+0x64>)
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <delay_us+0x68>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4916      	ldr	r1, [pc, #88]	@ (80018f4 <delay_us+0x6c>)
 800189a:	fba1 1303 	umull	r1, r3, r1, r3
 800189e:	0c9b      	lsrs	r3, r3, #18
 80018a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a4:	60bb      	str	r3, [r7, #8]
	uint32_t t_act = cycle_counter_time_us();
 80018a6:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <delay_us+0x64>)
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <delay_us+0x68>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4911      	ldr	r1, [pc, #68]	@ (80018f4 <delay_us+0x6c>)
 80018b0:	fba1 1303 	umull	r1, r3, r1, r3
 80018b4:	0c9b      	lsrs	r3, r3, #18
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	60fb      	str	r3, [r7, #12]

	while(t_act - t_ini < delay){
 80018bc:	e00a      	b.n	80018d4 <delay_us+0x4c>
		t_act = cycle_counter_time_us();
 80018be:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <delay_us+0x64>)
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <delay_us+0x68>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	490b      	ldr	r1, [pc, #44]	@ (80018f4 <delay_us+0x6c>)
 80018c8:	fba1 1303 	umull	r1, r3, r1, r3
 80018cc:	0c9b      	lsrs	r3, r3, #18
 80018ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d2:	60fb      	str	r3, [r7, #12]
	while(t_act - t_ini < delay){
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1ad2      	subs	r2, r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d3ee      	bcc.n	80018be <delay_us+0x36>
	}
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	e0001000 	.word	0xe0001000
 80018f0:	20000000 	.word	0x20000000
 80018f4:	431bde83 	.word	0x431bde83

080018f8 <displayInit>:
//=====[Implementations of public functions]===================================
void displayInit( displayConnection_t connection )
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
    display.connection = connection;
 8001902:	4a2f      	ldr	r2, [pc, #188]	@ (80019c0 <displayInit+0xc8>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	7013      	strb	r3, [r2, #0]

    initial8BitCommunicationIsCompleted = false;
 8001908:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <displayInit+0xcc>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]

    HAL_Delay( 50 );
 800190e:	2032      	movs	r0, #50	@ 0x32
 8001910:	f7fe feaa 	bl	8000668 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001914:	2130      	movs	r1, #48	@ 0x30
 8001916:	2000      	movs	r0, #0
 8001918:	f000 f8c2 	bl	8001aa0 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay( 5 );
 800191c:	2005      	movs	r0, #5
 800191e:	f7fe fea3 	bl	8000668 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001922:	2130      	movs	r1, #48	@ 0x30
 8001924:	2000      	movs	r0, #0
 8001926:	f000 f8bb 	bl	8001aa0 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay( 1 );
 800192a:	2001      	movs	r0, #1
 800192c:	f7fe fe9c 	bl	8000668 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001930:	2130      	movs	r1, #48	@ 0x30
 8001932:	2000      	movs	r0, #0
 8001934:	f000 f8b4 	bl	8001aa0 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay( 1 );
 8001938:	2001      	movs	r0, #1
 800193a:	f7fe fe95 	bl	8000668 <HAL_Delay>

    switch( display.connection ) {
 800193e:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <displayInit+0xc8>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <displayInit+0x62>
 8001946:	2b01      	cmp	r3, #1
 8001948:	d119      	bne.n	800197e <displayInit+0x86>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800194a:	2138      	movs	r1, #56	@ 0x38
 800194c:	2000      	movs	r0, #0
 800194e:	f000 f8a7 	bl	8001aa0 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_8BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay( 1 );
 8001952:	2001      	movs	r0, #1
 8001954:	f7fe fe88 	bl	8000668 <HAL_Delay>
        break;
 8001958:	e011      	b.n	800197e <displayInit+0x86>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800195a:	2120      	movs	r1, #32
 800195c:	2000      	movs	r0, #0
 800195e:	f000 f89f 	bl	8001aa0 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS );
            HAL_Delay( 1 );
 8001962:	2001      	movs	r0, #1
 8001964:	f7fe fe80 	bl	8000668 <HAL_Delay>

            initial8BitCommunicationIsCompleted = true;
 8001968:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <displayInit+0xcc>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]

            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800196e:	2128      	movs	r1, #40	@ 0x28
 8001970:	2000      	movs	r0, #0
 8001972:	f000 f895 	bl	8001aa0 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay( 1 );
 8001976:	2001      	movs	r0, #1
 8001978:	f7fe fe76 	bl	8000668 <HAL_Delay>
        break;
 800197c:	bf00      	nop
    }

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800197e:	2108      	movs	r1, #8
 8001980:	2000      	movs	r0, #0
 8001982:	f000 f88d 	bl	8001aa0 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay( 1 );
 8001986:	2001      	movs	r0, #1
 8001988:	f7fe fe6e 	bl	8000668 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800198c:	2101      	movs	r1, #1
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f886 	bl	8001aa0 <displayCodeWrite>
                      DISPLAY_IR_CLEAR_DISPLAY );
    HAL_Delay( 1 );
 8001994:	2001      	movs	r0, #1
 8001996:	f7fe fe67 	bl	8000668 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800199a:	2106      	movs	r1, #6
 800199c:	2000      	movs	r0, #0
 800199e:	f000 f87f 	bl	8001aa0 <displayCodeWrite>
                      DISPLAY_IR_ENTRY_MODE_SET |
                      DISPLAY_IR_ENTRY_MODE_SET_INCREMENT |
                      DISPLAY_IR_ENTRY_MODE_SET_NO_SHIFT );
    HAL_Delay( 1 );
 80019a2:	2001      	movs	r0, #1
 80019a4:	f7fe fe60 	bl	8000668 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019a8:	210c      	movs	r1, #12
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 f878 	bl	8001aa0 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_ON |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay( 1 );
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7fe fe59 	bl	8000668 <HAL_Delay>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200000fc 	.word	0x200000fc
 80019c4:	200000fd 	.word	0x200000fd

080019c8 <displayCharPositionWrite>:

void displayCharPositionWrite( uint8_t charPositionX, uint8_t charPositionY )
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	460a      	mov	r2, r1
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	4613      	mov	r3, r2
 80019d6:	71bb      	strb	r3, [r7, #6]
    switch( charPositionY ) {
 80019d8:	79bb      	ldrb	r3, [r7, #6]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d846      	bhi.n	8001a6c <displayCharPositionWrite+0xa4>
 80019de:	a201      	add	r2, pc, #4	@ (adr r2, 80019e4 <displayCharPositionWrite+0x1c>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	080019f5 	.word	0x080019f5
 80019e8:	08001a0d 	.word	0x08001a0d
 80019ec:	08001a2d 	.word	0x08001a2d
 80019f0:	08001a4d 	.word	0x08001a4d
        case 0:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	4619      	mov	r1, r3
 80019fe:	2000      	movs	r0, #0
 8001a00:	f000 f84e 	bl	8001aa0 <displayCodeWrite>
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE1_FIRST_CHARACTER_ADDRESS +
                                charPositionX ) );
            //HAL_Delay( 1 );
            delay_us( 37 );
 8001a04:	2025      	movs	r0, #37	@ 0x25
 8001a06:	f7ff ff3f 	bl	8001888 <delay_us>
        break;
 8001a0a:	e02f      	b.n	8001a6c <displayCharPositionWrite+0xa4>

        case 1:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE2_FIRST_CHARACTER_ADDRESS +
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	3340      	adds	r3, #64	@ 0x40
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001a14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a18:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 f83e 	bl	8001aa0 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay( 1 );
            delay_us( 37 );
 8001a24:	2025      	movs	r0, #37	@ 0x25
 8001a26:	f7ff ff2f 	bl	8001888 <delay_us>
        break;
 8001a2a:	e01f      	b.n	8001a6c <displayCharPositionWrite+0xa4>

        case 2:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE3_FIRST_CHARACTER_ADDRESS +
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	3314      	adds	r3, #20
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001a34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a38:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 f82e 	bl	8001aa0 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay( 1 );
            delay_us( 37 );
 8001a44:	2025      	movs	r0, #37	@ 0x25
 8001a46:	f7ff ff1f 	bl	8001888 <delay_us>
        break;
 8001a4a:	e00f      	b.n	8001a6c <displayCharPositionWrite+0xa4>

        case 3:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE4_FIRST_CHARACTER_ADDRESS +
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	3354      	adds	r3, #84	@ 0x54
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001a54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a58:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f81e 	bl	8001aa0 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay( 1 );
            delay_us(37);
 8001a64:	2025      	movs	r0, #37	@ 0x25
 8001a66:	f7ff ff0f 	bl	8001888 <delay_us>
        break;
 8001a6a:	bf00      	nop
    }
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <displayStringWrite>:

void displayStringWrite( const char * str )
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001a7c:	e007      	b.n	8001a8e <displayStringWrite+0x1a>
        displayCodeWrite(DISPLAY_RS_DATA, *str++);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f000 f809 	bl	8001aa0 <displayCodeWrite>
    while (*str) {
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f3      	bne.n	8001a7e <displayStringWrite+0xa>
    }
}
 8001a96:	bf00      	nop
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <displayCodeWrite>:

//=====[Implementations of private functions]==================================
static void displayCodeWrite( bool type, uint8_t dataBus )
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	71fb      	strb	r3, [r7, #7]
 8001aac:	4613      	mov	r3, r2
 8001aae:	71bb      	strb	r3, [r7, #6]
    if ( type == DISPLAY_RS_INSTRUCTION )
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f083 0301 	eor.w	r3, r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d004      	beq.n	8001ac6 <displayCodeWrite+0x26>
        displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_INSTRUCTION );
 8001abc:	2100      	movs	r1, #0
 8001abe:	2004      	movs	r0, #4
 8001ac0:	f000 f812 	bl	8001ae8 <displayPinWrite>
 8001ac4:	e003      	b.n	8001ace <displayCodeWrite+0x2e>
	else
        displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_DATA );
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	2004      	movs	r0, #4
 8001aca:	f000 f80d 	bl	8001ae8 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_RW, DISPLAY_RW_WRITE );
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2005      	movs	r0, #5
 8001ad2:	f000 f809 	bl	8001ae8 <displayPinWrite>
    displayDataBusWrite( dataBus );
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 f873 	bl	8001bc4 <displayDataBusWrite>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <displayPinWrite>:

static void displayPinWrite( uint8_t pinName, int value )
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
    switch( display.connection ) {
 8001af4:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <displayPinWrite+0xcc>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <displayPinWrite+0x1c>
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d154      	bne.n	8001baa <displayPinWrite+0xc2>
                case DISPLAY_PIN_D7: displayD7 = value;   break;
                case DISPLAY_PIN_RS: displayRs = value;   break;
                case DISPLAY_PIN_EN: displayEn = value;   break;
                case DISPLAY_PIN_RW: break;
                */
                default: break;
 8001b00:	bf00      	nop
            }
            break;
 8001b02:	e052      	b.n	8001baa <displayPinWrite+0xc2>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            switch( pinName ) {
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	3b04      	subs	r3, #4
 8001b08:	2b0a      	cmp	r3, #10
 8001b0a:	d84c      	bhi.n	8001ba6 <displayPinWrite+0xbe>
 8001b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b14 <displayPinWrite+0x2c>)
 8001b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b12:	bf00      	nop
 8001b14:	08001b85 	.word	0x08001b85
 8001b18:	08001ba7 	.word	0x08001ba7
 8001b1c:	08001b97 	.word	0x08001b97
 8001b20:	08001ba7 	.word	0x08001ba7
 8001b24:	08001ba7 	.word	0x08001ba7
 8001b28:	08001ba7 	.word	0x08001ba7
 8001b2c:	08001ba7 	.word	0x08001ba7
 8001b30:	08001b41 	.word	0x08001b41
 8001b34:	08001b51 	.word	0x08001b51
 8001b38:	08001b61 	.word	0x08001b61
 8001b3c:	08001b73 	.word	0x08001b73
                case DISPLAY_PIN_D4: HAL_GPIO_WritePin((GPIO_TypeDef *)D4_GPIO_Port, (uint16_t)D4_Pin, (GPIO_PinState)value);   break;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	2120      	movs	r1, #32
 8001b48:	481b      	ldr	r0, [pc, #108]	@ (8001bb8 <displayPinWrite+0xd0>)
 8001b4a:	f7ff f849 	bl	8000be0 <HAL_GPIO_WritePin>
 8001b4e:	e02b      	b.n	8001ba8 <displayPinWrite+0xc0>
                case DISPLAY_PIN_D5: HAL_GPIO_WritePin((GPIO_TypeDef *)D5_GPIO_Port, (uint16_t)D5_Pin, (GPIO_PinState)value);   break;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	2110      	movs	r1, #16
 8001b58:	4817      	ldr	r0, [pc, #92]	@ (8001bb8 <displayPinWrite+0xd0>)
 8001b5a:	f7ff f841 	bl	8000be0 <HAL_GPIO_WritePin>
 8001b5e:	e023      	b.n	8001ba8 <displayPinWrite+0xc0>
                case DISPLAY_PIN_D6: HAL_GPIO_WritePin((GPIO_TypeDef *)D6_GPIO_Port, (uint16_t)D6_Pin, (GPIO_PinState)value);   break;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b6a:	4813      	ldr	r0, [pc, #76]	@ (8001bb8 <displayPinWrite+0xd0>)
 8001b6c:	f7ff f838 	bl	8000be0 <HAL_GPIO_WritePin>
 8001b70:	e01a      	b.n	8001ba8 <displayPinWrite+0xc0>
                case DISPLAY_PIN_D7: HAL_GPIO_WritePin((GPIO_TypeDef *)D7_GPIO_Port, (uint16_t)D7_Pin, (GPIO_PinState)value);   break;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b7c:	480f      	ldr	r0, [pc, #60]	@ (8001bbc <displayPinWrite+0xd4>)
 8001b7e:	f7ff f82f 	bl	8000be0 <HAL_GPIO_WritePin>
 8001b82:	e011      	b.n	8001ba8 <displayPinWrite+0xc0>
                case DISPLAY_PIN_RS: HAL_GPIO_WritePin((GPIO_TypeDef *)D8_GPIO_Port, (uint16_t)D8_Pin, (GPIO_PinState)value);  break;//D8 Y D9
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b8e:	480b      	ldr	r0, [pc, #44]	@ (8001bbc <displayPinWrite+0xd4>)
 8001b90:	f7ff f826 	bl	8000be0 <HAL_GPIO_WritePin>
 8001b94:	e008      	b.n	8001ba8 <displayPinWrite+0xc0>
                case DISPLAY_PIN_EN: HAL_GPIO_WritePin((GPIO_TypeDef *)D9_GPIO_Port, (uint16_t)D9_Pin, (GPIO_PinState)value);   break;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2180      	movs	r1, #128	@ 0x80
 8001b9e:	4808      	ldr	r0, [pc, #32]	@ (8001bc0 <displayPinWrite+0xd8>)
 8001ba0:	f7ff f81e 	bl	8000be0 <HAL_GPIO_WritePin>
 8001ba4:	e000      	b.n	8001ba8 <displayPinWrite+0xc0>
                case DISPLAY_PIN_RW: break;
                default: break;
 8001ba6:	bf00      	nop
            }
            break;
 8001ba8:	bf00      	nop
    }
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200000fc 	.word	0x200000fc
 8001bb8:	40010c00 	.word	0x40010c00
 8001bbc:	40010800 	.word	0x40010800
 8001bc0:	40011000 	.word	0x40011000

08001bc4 <displayDataBusWrite>:

static void displayDataBusWrite( uint8_t dataBus )
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2006      	movs	r0, #6
 8001bd2:	f7ff ff89 	bl	8001ae8 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b10000000 );
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bdc:	4619      	mov	r1, r3
 8001bde:	200e      	movs	r0, #14
 8001be0:	f7ff ff82 	bl	8001ae8 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b01000000 );
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bea:	4619      	mov	r1, r3
 8001bec:	200d      	movs	r0, #13
 8001bee:	f7ff ff7b 	bl	8001ae8 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00100000 );
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	200c      	movs	r0, #12
 8001bfc:	f7ff ff74 	bl	8001ae8 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00010000 );
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	4619      	mov	r1, r3
 8001c08:	200b      	movs	r0, #11
 8001c0a:	f7ff ff6d 	bl	8001ae8 <displayPinWrite>
    switch( display.connection ) {
 8001c0e:	4b32      	ldr	r3, [pc, #200]	@ (8001cd8 <displayDataBusWrite+0x114>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d01e      	beq.n	8001c54 <displayDataBusWrite+0x90>
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d14b      	bne.n	8001cb2 <displayDataBusWrite+0xee>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayPinWrite( DISPLAY_PIN_D3, dataBus & 0b00001000 );
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	4619      	mov	r1, r3
 8001c22:	200a      	movs	r0, #10
 8001c24:	f7ff ff60 	bl	8001ae8 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D2, dataBus & 0b00000100 );
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	4619      	mov	r1, r3
 8001c30:	2009      	movs	r0, #9
 8001c32:	f7ff ff59 	bl	8001ae8 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D1, dataBus & 0b00000010 );
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	2008      	movs	r0, #8
 8001c40:	f7ff ff52 	bl	8001ae8 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D0, dataBus & 0b00000001 );
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	2007      	movs	r0, #7
 8001c4e:	f7ff ff4b 	bl	8001ae8 <displayPinWrite>
        break;
 8001c52:	e02e      	b.n	8001cb2 <displayDataBusWrite+0xee>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            if ( initial8BitCommunicationIsCompleted == true) {
 8001c54:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <displayDataBusWrite+0x118>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d029      	beq.n	8001cb0 <displayDataBusWrite+0xec>
                displayPinWrite( DISPLAY_PIN_EN, ON );
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	2006      	movs	r0, #6
 8001c60:	f7ff ff42 	bl	8001ae8 <displayPinWrite>
                HAL_Delay( 1 );
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7fe fcff 	bl	8000668 <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2006      	movs	r0, #6
 8001c6e:	f7ff ff3b 	bl	8001ae8 <displayPinWrite>
                HAL_Delay( 1 );
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7fe fcf8 	bl	8000668 <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b00001000 );
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	4619      	mov	r1, r3
 8001c80:	200e      	movs	r0, #14
 8001c82:	f7ff ff31 	bl	8001ae8 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b00000100 );
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	200d      	movs	r0, #13
 8001c90:	f7ff ff2a 	bl	8001ae8 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00000010 );
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	200c      	movs	r0, #12
 8001c9e:	f7ff ff23 	bl	8001ae8 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00000001 );
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	4619      	mov	r1, r3
 8001caa:	200b      	movs	r0, #11
 8001cac:	f7ff ff1c 	bl	8001ae8 <displayPinWrite>
            }
        break;
 8001cb0:	bf00      	nop

    }
    displayPinWrite( DISPLAY_PIN_EN, ON );
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	2006      	movs	r0, #6
 8001cb6:	f7ff ff17 	bl	8001ae8 <displayPinWrite>
    HAL_Delay( 1 );
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7fe fcd4 	bl	8000668 <HAL_Delay>
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2006      	movs	r0, #6
 8001cc4:	f7ff ff10 	bl	8001ae8 <displayPinWrite>
    HAL_Delay( 1 );
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f7fe fccd 	bl	8000668 <HAL_Delay>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200000fc 	.word	0x200000fc
 8001cdc:	200000fd 	.word	0x200000fd

08001ce0 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	printf(msg);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fd1d 	bl	8002728 <iprintf>
	fflush(stdout);
 8001cee:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <logger_log_print_+0x24>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fc41 	bl	800257c <fflush>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000030 	.word	0x20000030

08001d08 <task_test_init>:
uint32_t g_task_test_cnt;
volatile uint32_t g_task_test_tick_cnt;

/********************** external functions definition ************************/
void task_test_init(void *parameters)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	6078      	str	r0, [r7, #4]
	task_test_dta_t 	*p_task_test_dta;
	uint32_t			tick;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_test_init), p_task_test);
 8001d10:	b672      	cpsid	i
 8001d12:	4b37      	ldr	r3, [pc, #220]	@ (8001df0 <task_test_init+0xe8>)
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	4b37      	ldr	r3, [pc, #220]	@ (8001df4 <task_test_init+0xec>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	4b36      	ldr	r3, [pc, #216]	@ (8001df8 <task_test_init+0xf0>)
 8001d1e:	4a37      	ldr	r2, [pc, #220]	@ (8001dfc <task_test_init+0xf4>)
 8001d20:	213f      	movs	r1, #63	@ 0x3f
 8001d22:	f000 fd13 	bl	800274c <sniprintf>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a35      	ldr	r2, [pc, #212]	@ (8001e00 <task_test_init+0xf8>)
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b30      	ldr	r3, [pc, #192]	@ (8001df0 <task_test_init+0xe8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ffd5 	bl	8001ce0 <logger_log_print_>
 8001d36:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_test), p_task_test_);
 8001d38:	b672      	cpsid	i
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001df0 <task_test_init+0xe8>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	4b31      	ldr	r3, [pc, #196]	@ (8001e04 <task_test_init+0xfc>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	4b30      	ldr	r3, [pc, #192]	@ (8001e08 <task_test_init+0x100>)
 8001d46:	4a31      	ldr	r2, [pc, #196]	@ (8001e0c <task_test_init+0x104>)
 8001d48:	213f      	movs	r1, #63	@ 0x3f
 8001d4a:	f000 fcff 	bl	800274c <sniprintf>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4a2b      	ldr	r2, [pc, #172]	@ (8001e00 <task_test_init+0xf8>)
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b26      	ldr	r3, [pc, #152]	@ (8001df0 <task_test_init+0xe8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ffc1 	bl	8001ce0 <logger_log_print_>
 8001d5e:	b662      	cpsie	i

	g_task_test_cnt = G_TASK_TEST_CNT_INIT;
 8001d60:	4b2b      	ldr	r3, [pc, #172]	@ (8001e10 <task_test_init+0x108>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_test_cnt), g_task_test_cnt);
 8001d66:	b672      	cpsid	i
 8001d68:	4b21      	ldr	r3, [pc, #132]	@ (8001df0 <task_test_init+0xe8>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	4b28      	ldr	r3, [pc, #160]	@ (8001e10 <task_test_init+0x108>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	4b28      	ldr	r3, [pc, #160]	@ (8001e14 <task_test_init+0x10c>)
 8001d74:	4a28      	ldr	r2, [pc, #160]	@ (8001e18 <task_test_init+0x110>)
 8001d76:	213f      	movs	r1, #63	@ 0x3f
 8001d78:	f000 fce8 	bl	800274c <sniprintf>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4a20      	ldr	r2, [pc, #128]	@ (8001e00 <task_test_init+0xf8>)
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <task_test_init+0xe8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ffaa 	bl	8001ce0 <logger_log_print_>
 8001d8c:	b662      	cpsie	i

	/* Update Task Test Configuration & Data Pointer */
	p_task_test_dta = &task_test_dta;
 8001d8e:	4b23      	ldr	r3, [pc, #140]	@ (8001e1c <task_test_init+0x114>)
 8001d90:	60fb      	str	r3, [r7, #12]

	tick = p_task_test_dta->tick;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60bb      	str	r3, [r7, #8]
	LOGGER_LOG("   %s = %lu", GET_NAME(tick), (uint32_t)tick);
 8001d98:	b672      	cpsid	i
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <task_test_init+0xe8>)
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e20 <task_test_init+0x118>)
 8001da4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e24 <task_test_init+0x11c>)
 8001da6:	213f      	movs	r1, #63	@ 0x3f
 8001da8:	f000 fcd0 	bl	800274c <sniprintf>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4a14      	ldr	r2, [pc, #80]	@ (8001e00 <task_test_init+0xf8>)
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <task_test_init+0xe8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ff92 	bl	8001ce0 <logger_log_print_>
 8001dbc:	b662      	cpsie	i

    displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff fd9a 	bl	80018f8 <displayInit>

    displayCharPositionWrite(0, 0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff fdfe 	bl	80019c8 <displayCharPositionWrite>
	displayStringWrite("TdSE Bienvenidos");
 8001dcc:	4816      	ldr	r0, [pc, #88]	@ (8001e28 <task_test_init+0x120>)
 8001dce:	f7ff fe51 	bl	8001a74 <displayStringWrite>

	displayCharPositionWrite(0, 1);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff fdf7 	bl	80019c8 <displayCharPositionWrite>
	displayStringWrite("Test Nro: ");
 8001dda:	4814      	ldr	r0, [pc, #80]	@ (8001e2c <task_test_init+0x124>)
 8001ddc:	f7ff fe4a 	bl	8001a74 <displayStringWrite>

	g_task_test_tick_cnt = G_TASK_TEST_TICK_CNT_INI;
 8001de0:	4b13      	ldr	r3, [pc, #76]	@ (8001e30 <task_test_init+0x128>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	08003868 	.word	0x08003868
 8001df4:	20000014 	.word	0x20000014
 8001df8:	08003794 	.word	0x08003794
 8001dfc:	080037a4 	.word	0x080037a4
 8001e00:	20000140 	.word	0x20000140
 8001e04:	20000018 	.word	0x20000018
 8001e08:	080037bc 	.word	0x080037bc
 8001e0c:	080037c8 	.word	0x080037c8
 8001e10:	20000148 	.word	0x20000148
 8001e14:	080037d8 	.word	0x080037d8
 8001e18:	080037e8 	.word	0x080037e8
 8001e1c:	20000144 	.word	0x20000144
 8001e20:	080037f8 	.word	0x080037f8
 8001e24:	08003800 	.word	0x08003800
 8001e28:	0800380c 	.word	0x0800380c
 8001e2c:	08003820 	.word	0x08003820
 8001e30:	2000014c 	.word	0x2000014c

08001e34 <task_test_update>:

void task_test_update(void *parameters)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	task_test_dta_t *p_task_test_dta;
	bool b_time_update_required = false;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	75fb      	strb	r3, [r7, #23]
	char test_str[8];

	/* Update Task Test Counter */
	g_task_test_cnt++;
 8001e40:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <task_test_update+0xac>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a26      	ldr	r2, [pc, #152]	@ (8001ee0 <task_test_update+0xac>)
 8001e48:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_test_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8001e4a:	b672      	cpsid	i
    if (G_TASK_TEST_TICK_CNT_INI < g_task_test_tick_cnt)
 8001e4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ee4 <task_test_update+0xb0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <task_test_update+0x2e>
    {
    	g_task_test_tick_cnt--;
 8001e54:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <task_test_update+0xb0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ee4 <task_test_update+0xb0>)
 8001e5c:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8001e62:	b662      	cpsie	i

    while (b_time_update_required)
 8001e64:	e034      	b.n	8001ed0 <task_test_update+0x9c>
    {
    	/* Update Task Test Configuration & Data Pointer */
    	p_task_test_dta = &task_test_dta;
 8001e66:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <task_test_update+0xb4>)
 8001e68:	613b      	str	r3, [r7, #16]

    	if (DEL_TEST_XX_MIN < p_task_test_dta->tick)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <task_test_update+0x4a>
		{
			p_task_test_dta->tick--;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	1e5a      	subs	r2, r3, #1
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e018      	b.n	8001eb0 <task_test_update+0x7c>
		}
		else
		{
			p_task_test_dta->tick = DEL_TEST_XX_MAX ;
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e84:	601a      	str	r2, [r3, #0]

			snprintf(test_str, sizeof(test_str), "%lu", (g_task_test_cnt/1000ul));
 8001e86:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <task_test_update+0xac>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a18      	ldr	r2, [pc, #96]	@ (8001eec <task_test_update+0xb8>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	099b      	lsrs	r3, r3, #6
 8001e92:	f107 0008 	add.w	r0, r7, #8
 8001e96:	4a16      	ldr	r2, [pc, #88]	@ (8001ef0 <task_test_update+0xbc>)
 8001e98:	2108      	movs	r1, #8
 8001e9a:	f000 fc57 	bl	800274c <sniprintf>
			displayCharPositionWrite(10, 1);
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	200a      	movs	r0, #10
 8001ea2:	f7ff fd91 	bl	80019c8 <displayCharPositionWrite>
			displayStringWrite(test_str);
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fde2 	bl	8001a74 <displayStringWrite>
		}

    	/* Protect shared resource (g_task_test_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8001eb0:	b672      	cpsid	i
		if (G_TASK_TEST_TICK_CNT_INI < g_task_test_tick_cnt)
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <task_test_update+0xb0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <task_test_update+0x96>
		{
			g_task_test_tick_cnt--;
 8001eba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <task_test_update+0xb0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	4a08      	ldr	r2, [pc, #32]	@ (8001ee4 <task_test_update+0xb0>)
 8001ec2:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	75fb      	strb	r3, [r7, #23]
 8001ec8:	e001      	b.n	8001ece <task_test_update+0x9a>
		}
		else
		{
			b_time_update_required = false;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	75fb      	strb	r3, [r7, #23]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8001ece:	b662      	cpsie	i
    while (b_time_update_required)
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1c7      	bne.n	8001e66 <task_test_update+0x32>
    }
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000148 	.word	0x20000148
 8001ee4:	2000014c 	.word	0x2000014c
 8001ee8:	20000144 	.word	0x20000144
 8001eec:	10624dd3 	.word	0x10624dd3
 8001ef0:	0800382c 	.word	0x0800382c

08001ef4 <findslot>:
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <findslot+0x2c>)
 8001ef6:	b510      	push	{r4, lr}
 8001ef8:	4604      	mov	r4, r0
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	b118      	cbz	r0, 8001f06 <findslot+0x12>
 8001efe:	6a03      	ldr	r3, [r0, #32]
 8001f00:	b90b      	cbnz	r3, 8001f06 <findslot+0x12>
 8001f02:	f000 fbdb 	bl	80026bc <__sinit>
 8001f06:	2c13      	cmp	r4, #19
 8001f08:	d807      	bhi.n	8001f1a <findslot+0x26>
 8001f0a:	4806      	ldr	r0, [pc, #24]	@ (8001f24 <findslot+0x30>)
 8001f0c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001f10:	3201      	adds	r2, #1
 8001f12:	d002      	beq.n	8001f1a <findslot+0x26>
 8001f14:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	e7fc      	b.n	8001f18 <findslot+0x24>
 8001f1e:	bf00      	nop
 8001f20:	20000030 	.word	0x20000030
 8001f24:	2000015c 	.word	0x2000015c

08001f28 <error>:
 8001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	f000 fcd6 	bl	80028dc <__errno>
 8001f30:	2613      	movs	r6, #19
 8001f32:	4605      	mov	r5, r0
 8001f34:	2700      	movs	r7, #0
 8001f36:	4630      	mov	r0, r6
 8001f38:	4639      	mov	r1, r7
 8001f3a:	beab      	bkpt	0x00ab
 8001f3c:	4606      	mov	r6, r0
 8001f3e:	4620      	mov	r0, r4
 8001f40:	602e      	str	r6, [r5, #0]
 8001f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f44 <checkerror>:
 8001f44:	1c43      	adds	r3, r0, #1
 8001f46:	d101      	bne.n	8001f4c <checkerror+0x8>
 8001f48:	f7ff bfee 	b.w	8001f28 <error>
 8001f4c:	4770      	bx	lr

08001f4e <_swiread>:
 8001f4e:	b530      	push	{r4, r5, lr}
 8001f50:	b085      	sub	sp, #20
 8001f52:	2406      	movs	r4, #6
 8001f54:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f58:	9203      	str	r2, [sp, #12]
 8001f5a:	ad01      	add	r5, sp, #4
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	4629      	mov	r1, r5
 8001f60:	beab      	bkpt	0x00ab
 8001f62:	4604      	mov	r4, r0
 8001f64:	4620      	mov	r0, r4
 8001f66:	f7ff ffed 	bl	8001f44 <checkerror>
 8001f6a:	b005      	add	sp, #20
 8001f6c:	bd30      	pop	{r4, r5, pc}

08001f6e <_read>:
 8001f6e:	b570      	push	{r4, r5, r6, lr}
 8001f70:	460e      	mov	r6, r1
 8001f72:	4614      	mov	r4, r2
 8001f74:	f7ff ffbe 	bl	8001ef4 <findslot>
 8001f78:	4605      	mov	r5, r0
 8001f7a:	b930      	cbnz	r0, 8001f8a <_read+0x1c>
 8001f7c:	f000 fcae 	bl	80028dc <__errno>
 8001f80:	2309      	movs	r3, #9
 8001f82:	6003      	str	r3, [r0, #0]
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	bd70      	pop	{r4, r5, r6, pc}
 8001f8a:	4622      	mov	r2, r4
 8001f8c:	4631      	mov	r1, r6
 8001f8e:	6800      	ldr	r0, [r0, #0]
 8001f90:	f7ff ffdd 	bl	8001f4e <_swiread>
 8001f94:	1c43      	adds	r3, r0, #1
 8001f96:	d0f5      	beq.n	8001f84 <_read+0x16>
 8001f98:	686b      	ldr	r3, [r5, #4]
 8001f9a:	1a20      	subs	r0, r4, r0
 8001f9c:	4403      	add	r3, r0
 8001f9e:	606b      	str	r3, [r5, #4]
 8001fa0:	e7f2      	b.n	8001f88 <_read+0x1a>

08001fa2 <_swilseek>:
 8001fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fa4:	460c      	mov	r4, r1
 8001fa6:	4616      	mov	r6, r2
 8001fa8:	f7ff ffa4 	bl	8001ef4 <findslot>
 8001fac:	4605      	mov	r5, r0
 8001fae:	b940      	cbnz	r0, 8001fc2 <_swilseek+0x20>
 8001fb0:	f000 fc94 	bl	80028dc <__errno>
 8001fb4:	2309      	movs	r3, #9
 8001fb6:	6003      	str	r3, [r0, #0]
 8001fb8:	f04f 34ff 	mov.w	r4, #4294967295
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	b003      	add	sp, #12
 8001fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc2:	2e02      	cmp	r6, #2
 8001fc4:	d903      	bls.n	8001fce <_swilseek+0x2c>
 8001fc6:	f000 fc89 	bl	80028dc <__errno>
 8001fca:	2316      	movs	r3, #22
 8001fcc:	e7f3      	b.n	8001fb6 <_swilseek+0x14>
 8001fce:	2e01      	cmp	r6, #1
 8001fd0:	d112      	bne.n	8001ff8 <_swilseek+0x56>
 8001fd2:	6843      	ldr	r3, [r0, #4]
 8001fd4:	18e4      	adds	r4, r4, r3
 8001fd6:	d4f6      	bmi.n	8001fc6 <_swilseek+0x24>
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	260a      	movs	r6, #10
 8001fdc:	466f      	mov	r7, sp
 8001fde:	e9cd 3400 	strd	r3, r4, [sp]
 8001fe2:	4630      	mov	r0, r6
 8001fe4:	4639      	mov	r1, r7
 8001fe6:	beab      	bkpt	0x00ab
 8001fe8:	4606      	mov	r6, r0
 8001fea:	4630      	mov	r0, r6
 8001fec:	f7ff ffaa 	bl	8001f44 <checkerror>
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	dbe1      	blt.n	8001fb8 <_swilseek+0x16>
 8001ff4:	606c      	str	r4, [r5, #4]
 8001ff6:	e7e1      	b.n	8001fbc <_swilseek+0x1a>
 8001ff8:	2e02      	cmp	r6, #2
 8001ffa:	6803      	ldr	r3, [r0, #0]
 8001ffc:	d1ec      	bne.n	8001fd8 <_swilseek+0x36>
 8001ffe:	260c      	movs	r6, #12
 8002000:	466f      	mov	r7, sp
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	4630      	mov	r0, r6
 8002006:	4639      	mov	r1, r7
 8002008:	beab      	bkpt	0x00ab
 800200a:	4606      	mov	r6, r0
 800200c:	4630      	mov	r0, r6
 800200e:	f7ff ff99 	bl	8001f44 <checkerror>
 8002012:	1c43      	adds	r3, r0, #1
 8002014:	d0d0      	beq.n	8001fb8 <_swilseek+0x16>
 8002016:	4404      	add	r4, r0
 8002018:	e7de      	b.n	8001fd8 <_swilseek+0x36>

0800201a <_lseek>:
 800201a:	f7ff bfc2 	b.w	8001fa2 <_swilseek>

0800201e <_swiwrite>:
 800201e:	b530      	push	{r4, r5, lr}
 8002020:	b085      	sub	sp, #20
 8002022:	2405      	movs	r4, #5
 8002024:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002028:	9203      	str	r2, [sp, #12]
 800202a:	ad01      	add	r5, sp, #4
 800202c:	4620      	mov	r0, r4
 800202e:	4629      	mov	r1, r5
 8002030:	beab      	bkpt	0x00ab
 8002032:	4604      	mov	r4, r0
 8002034:	4620      	mov	r0, r4
 8002036:	f7ff ff85 	bl	8001f44 <checkerror>
 800203a:	b005      	add	sp, #20
 800203c:	bd30      	pop	{r4, r5, pc}

0800203e <_write>:
 800203e:	b570      	push	{r4, r5, r6, lr}
 8002040:	460e      	mov	r6, r1
 8002042:	4615      	mov	r5, r2
 8002044:	f7ff ff56 	bl	8001ef4 <findslot>
 8002048:	4604      	mov	r4, r0
 800204a:	b930      	cbnz	r0, 800205a <_write+0x1c>
 800204c:	f000 fc46 	bl	80028dc <__errno>
 8002050:	2309      	movs	r3, #9
 8002052:	6003      	str	r3, [r0, #0]
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	bd70      	pop	{r4, r5, r6, pc}
 800205a:	462a      	mov	r2, r5
 800205c:	4631      	mov	r1, r6
 800205e:	6800      	ldr	r0, [r0, #0]
 8002060:	f7ff ffdd 	bl	800201e <_swiwrite>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	dbf5      	blt.n	8002054 <_write+0x16>
 8002068:	6862      	ldr	r2, [r4, #4]
 800206a:	1ae8      	subs	r0, r5, r3
 800206c:	4402      	add	r2, r0
 800206e:	42ab      	cmp	r3, r5
 8002070:	6062      	str	r2, [r4, #4]
 8002072:	d1f1      	bne.n	8002058 <_write+0x1a>
 8002074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff bf55 	b.w	8001f28 <error>

0800207e <_swiclose>:
 800207e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002080:	2402      	movs	r4, #2
 8002082:	9001      	str	r0, [sp, #4]
 8002084:	ad01      	add	r5, sp, #4
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	beab      	bkpt	0x00ab
 800208c:	4604      	mov	r4, r0
 800208e:	4620      	mov	r0, r4
 8002090:	f7ff ff58 	bl	8001f44 <checkerror>
 8002094:	b003      	add	sp, #12
 8002096:	bd30      	pop	{r4, r5, pc}

08002098 <_close>:
 8002098:	b538      	push	{r3, r4, r5, lr}
 800209a:	4605      	mov	r5, r0
 800209c:	f7ff ff2a 	bl	8001ef4 <findslot>
 80020a0:	4604      	mov	r4, r0
 80020a2:	b930      	cbnz	r0, 80020b2 <_close+0x1a>
 80020a4:	f000 fc1a 	bl	80028dc <__errno>
 80020a8:	2309      	movs	r3, #9
 80020aa:	6003      	str	r3, [r0, #0]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	bd38      	pop	{r3, r4, r5, pc}
 80020b2:	3d01      	subs	r5, #1
 80020b4:	2d01      	cmp	r5, #1
 80020b6:	d809      	bhi.n	80020cc <_close+0x34>
 80020b8:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <_close+0x48>)
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d104      	bne.n	80020cc <_close+0x34>
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295
 80020c6:	6003      	str	r3, [r0, #0]
 80020c8:	2000      	movs	r0, #0
 80020ca:	e7f1      	b.n	80020b0 <_close+0x18>
 80020cc:	6820      	ldr	r0, [r4, #0]
 80020ce:	f7ff ffd6 	bl	800207e <_swiclose>
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d1ec      	bne.n	80020b0 <_close+0x18>
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	6023      	str	r3, [r4, #0]
 80020dc:	e7e8      	b.n	80020b0 <_close+0x18>
 80020de:	bf00      	nop
 80020e0:	2000015c 	.word	0x2000015c

080020e4 <_swistat>:
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	460c      	mov	r4, r1
 80020e8:	f7ff ff04 	bl	8001ef4 <findslot>
 80020ec:	4605      	mov	r5, r0
 80020ee:	b930      	cbnz	r0, 80020fe <_swistat+0x1a>
 80020f0:	f000 fbf4 	bl	80028dc <__errno>
 80020f4:	2309      	movs	r3, #9
 80020f6:	6003      	str	r3, [r0, #0]
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	bd70      	pop	{r4, r5, r6, pc}
 80020fe:	6863      	ldr	r3, [r4, #4]
 8002100:	260c      	movs	r6, #12
 8002102:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002106:	6063      	str	r3, [r4, #4]
 8002108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800210c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800210e:	4630      	mov	r0, r6
 8002110:	4629      	mov	r1, r5
 8002112:	beab      	bkpt	0x00ab
 8002114:	4605      	mov	r5, r0
 8002116:	4628      	mov	r0, r5
 8002118:	f7ff ff14 	bl	8001f44 <checkerror>
 800211c:	1c43      	adds	r3, r0, #1
 800211e:	d0eb      	beq.n	80020f8 <_swistat+0x14>
 8002120:	6120      	str	r0, [r4, #16]
 8002122:	2000      	movs	r0, #0
 8002124:	e7ea      	b.n	80020fc <_swistat+0x18>

08002126 <_fstat>:
 8002126:	460b      	mov	r3, r1
 8002128:	b510      	push	{r4, lr}
 800212a:	2100      	movs	r1, #0
 800212c:	4604      	mov	r4, r0
 800212e:	2258      	movs	r2, #88	@ 0x58
 8002130:	4618      	mov	r0, r3
 8002132:	f000 fb84 	bl	800283e <memset>
 8002136:	4601      	mov	r1, r0
 8002138:	4620      	mov	r0, r4
 800213a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800213e:	f7ff bfd1 	b.w	80020e4 <_swistat>

08002142 <_stat>:
 8002142:	b538      	push	{r3, r4, r5, lr}
 8002144:	460d      	mov	r5, r1
 8002146:	4604      	mov	r4, r0
 8002148:	2258      	movs	r2, #88	@ 0x58
 800214a:	2100      	movs	r1, #0
 800214c:	4628      	mov	r0, r5
 800214e:	f000 fb76 	bl	800283e <memset>
 8002152:	4620      	mov	r0, r4
 8002154:	2100      	movs	r1, #0
 8002156:	f000 f811 	bl	800217c <_swiopen>
 800215a:	1c43      	adds	r3, r0, #1
 800215c:	4604      	mov	r4, r0
 800215e:	d00b      	beq.n	8002178 <_stat+0x36>
 8002160:	686b      	ldr	r3, [r5, #4]
 8002162:	4629      	mov	r1, r5
 8002164:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002168:	606b      	str	r3, [r5, #4]
 800216a:	f7ff ffbb 	bl	80020e4 <_swistat>
 800216e:	4605      	mov	r5, r0
 8002170:	4620      	mov	r0, r4
 8002172:	f7ff ff91 	bl	8002098 <_close>
 8002176:	462c      	mov	r4, r5
 8002178:	4620      	mov	r0, r4
 800217a:	bd38      	pop	{r3, r4, r5, pc}

0800217c <_swiopen>:
 800217c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002180:	4607      	mov	r7, r0
 8002182:	460e      	mov	r6, r1
 8002184:	2400      	movs	r4, #0
 8002186:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 800222c <_swiopen+0xb0>
 800218a:	b096      	sub	sp, #88	@ 0x58
 800218c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8002190:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002194:	3301      	adds	r3, #1
 8002196:	d032      	beq.n	80021fe <_swiopen+0x82>
 8002198:	3401      	adds	r4, #1
 800219a:	2c14      	cmp	r4, #20
 800219c:	d1f6      	bne.n	800218c <_swiopen+0x10>
 800219e:	f000 fb9d 	bl	80028dc <__errno>
 80021a2:	2318      	movs	r3, #24
 80021a4:	e03a      	b.n	800221c <_swiopen+0xa0>
 80021a6:	f240 6301 	movw	r3, #1537	@ 0x601
 80021aa:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80021ae:	07b2      	lsls	r2, r6, #30
 80021b0:	bf48      	it	mi
 80021b2:	f045 0502 	orrmi.w	r5, r5, #2
 80021b6:	421e      	tst	r6, r3
 80021b8:	bf18      	it	ne
 80021ba:	f045 0504 	orrne.w	r5, r5, #4
 80021be:	0733      	lsls	r3, r6, #28
 80021c0:	bf48      	it	mi
 80021c2:	f025 0504 	bicmi.w	r5, r5, #4
 80021c6:	4638      	mov	r0, r7
 80021c8:	bf48      	it	mi
 80021ca:	f045 0508 	orrmi.w	r5, r5, #8
 80021ce:	9700      	str	r7, [sp, #0]
 80021d0:	f7fd ffbc 	bl	800014c <strlen>
 80021d4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80021d8:	2501      	movs	r5, #1
 80021da:	4628      	mov	r0, r5
 80021dc:	4651      	mov	r1, sl
 80021de:	beab      	bkpt	0x00ab
 80021e0:	4605      	mov	r5, r0
 80021e2:	2d00      	cmp	r5, #0
 80021e4:	db06      	blt.n	80021f4 <_swiopen+0x78>
 80021e6:	2300      	movs	r3, #0
 80021e8:	44c8      	add	r8, r9
 80021ea:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 80021ee:	f8c8 3004 	str.w	r3, [r8, #4]
 80021f2:	e016      	b.n	8002222 <_swiopen+0xa6>
 80021f4:	4628      	mov	r0, r5
 80021f6:	f7ff fe97 	bl	8001f28 <error>
 80021fa:	4604      	mov	r4, r0
 80021fc:	e011      	b.n	8002222 <_swiopen+0xa6>
 80021fe:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002202:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002206:	46ea      	mov	sl, sp
 8002208:	d1cd      	bne.n	80021a6 <_swiopen+0x2a>
 800220a:	4651      	mov	r1, sl
 800220c:	4638      	mov	r0, r7
 800220e:	f7ff ff98 	bl	8002142 <_stat>
 8002212:	3001      	adds	r0, #1
 8002214:	d0c7      	beq.n	80021a6 <_swiopen+0x2a>
 8002216:	f000 fb61 	bl	80028dc <__errno>
 800221a:	2311      	movs	r3, #17
 800221c:	f04f 34ff 	mov.w	r4, #4294967295
 8002220:	6003      	str	r3, [r0, #0]
 8002222:	4620      	mov	r0, r4
 8002224:	b016      	add	sp, #88	@ 0x58
 8002226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800222a:	bf00      	nop
 800222c:	2000015c 	.word	0x2000015c

08002230 <_get_semihosting_exts>:
 8002230:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002234:	4606      	mov	r6, r0
 8002236:	460f      	mov	r7, r1
 8002238:	4829      	ldr	r0, [pc, #164]	@ (80022e0 <_get_semihosting_exts+0xb0>)
 800223a:	2100      	movs	r1, #0
 800223c:	4615      	mov	r5, r2
 800223e:	f7ff ff9d 	bl	800217c <_swiopen>
 8002242:	4604      	mov	r4, r0
 8002244:	462a      	mov	r2, r5
 8002246:	2100      	movs	r1, #0
 8002248:	4630      	mov	r0, r6
 800224a:	f000 faf8 	bl	800283e <memset>
 800224e:	1c63      	adds	r3, r4, #1
 8002250:	d014      	beq.n	800227c <_get_semihosting_exts+0x4c>
 8002252:	4620      	mov	r0, r4
 8002254:	f7ff fe4e 	bl	8001ef4 <findslot>
 8002258:	f04f 080c 	mov.w	r8, #12
 800225c:	4681      	mov	r9, r0
 800225e:	4640      	mov	r0, r8
 8002260:	4649      	mov	r1, r9
 8002262:	beab      	bkpt	0x00ab
 8002264:	4680      	mov	r8, r0
 8002266:	4640      	mov	r0, r8
 8002268:	f7ff fe6c 	bl	8001f44 <checkerror>
 800226c:	2803      	cmp	r0, #3
 800226e:	dd02      	ble.n	8002276 <_get_semihosting_exts+0x46>
 8002270:	1ec3      	subs	r3, r0, #3
 8002272:	42ab      	cmp	r3, r5
 8002274:	dc07      	bgt.n	8002286 <_get_semihosting_exts+0x56>
 8002276:	4620      	mov	r0, r4
 8002278:	f7ff ff0e 	bl	8002098 <_close>
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	b003      	add	sp, #12
 8002282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002286:	2204      	movs	r2, #4
 8002288:	4620      	mov	r0, r4
 800228a:	eb0d 0102 	add.w	r1, sp, r2
 800228e:	f7ff fe6e 	bl	8001f6e <_read>
 8002292:	2803      	cmp	r0, #3
 8002294:	ddef      	ble.n	8002276 <_get_semihosting_exts+0x46>
 8002296:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800229a:	2b53      	cmp	r3, #83	@ 0x53
 800229c:	d1eb      	bne.n	8002276 <_get_semihosting_exts+0x46>
 800229e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80022a2:	2b48      	cmp	r3, #72	@ 0x48
 80022a4:	d1e7      	bne.n	8002276 <_get_semihosting_exts+0x46>
 80022a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80022aa:	2b46      	cmp	r3, #70	@ 0x46
 80022ac:	d1e3      	bne.n	8002276 <_get_semihosting_exts+0x46>
 80022ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80022b2:	2b42      	cmp	r3, #66	@ 0x42
 80022b4:	d1df      	bne.n	8002276 <_get_semihosting_exts+0x46>
 80022b6:	2201      	movs	r2, #1
 80022b8:	4639      	mov	r1, r7
 80022ba:	4620      	mov	r0, r4
 80022bc:	f7ff fe71 	bl	8001fa2 <_swilseek>
 80022c0:	2800      	cmp	r0, #0
 80022c2:	dbd8      	blt.n	8002276 <_get_semihosting_exts+0x46>
 80022c4:	462a      	mov	r2, r5
 80022c6:	4631      	mov	r1, r6
 80022c8:	4620      	mov	r0, r4
 80022ca:	f7ff fe50 	bl	8001f6e <_read>
 80022ce:	4605      	mov	r5, r0
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff fee1 	bl	8002098 <_close>
 80022d6:	4628      	mov	r0, r5
 80022d8:	f7ff fe34 	bl	8001f44 <checkerror>
 80022dc:	e7d0      	b.n	8002280 <_get_semihosting_exts+0x50>
 80022de:	bf00      	nop
 80022e0:	0800386c 	.word	0x0800386c

080022e4 <initialise_semihosting_exts>:
 80022e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022e6:	2100      	movs	r1, #0
 80022e8:	2201      	movs	r2, #1
 80022ea:	4d09      	ldr	r5, [pc, #36]	@ (8002310 <initialise_semihosting_exts+0x2c>)
 80022ec:	4c09      	ldr	r4, [pc, #36]	@ (8002314 <initialise_semihosting_exts+0x30>)
 80022ee:	a801      	add	r0, sp, #4
 80022f0:	6029      	str	r1, [r5, #0]
 80022f2:	6022      	str	r2, [r4, #0]
 80022f4:	f7ff ff9c 	bl	8002230 <_get_semihosting_exts>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	dd07      	ble.n	800230c <initialise_semihosting_exts+0x28>
 80022fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002300:	f003 0201 	and.w	r2, r3, #1
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	602a      	str	r2, [r5, #0]
 800230a:	6023      	str	r3, [r4, #0]
 800230c:	b003      	add	sp, #12
 800230e:	bd30      	pop	{r4, r5, pc}
 8002310:	20000020 	.word	0x20000020
 8002314:	2000001c 	.word	0x2000001c

08002318 <_has_ext_stdout_stderr>:
 8002318:	b510      	push	{r4, lr}
 800231a:	4c04      	ldr	r4, [pc, #16]	@ (800232c <_has_ext_stdout_stderr+0x14>)
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	da01      	bge.n	8002326 <_has_ext_stdout_stderr+0xe>
 8002322:	f7ff ffdf 	bl	80022e4 <initialise_semihosting_exts>
 8002326:	6820      	ldr	r0, [r4, #0]
 8002328:	bd10      	pop	{r4, pc}
 800232a:	bf00      	nop
 800232c:	2000001c 	.word	0x2000001c

08002330 <initialise_monitor_handles>:
 8002330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002334:	2303      	movs	r3, #3
 8002336:	2400      	movs	r4, #0
 8002338:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 80023dc <initialise_monitor_handles+0xac>
 800233c:	b085      	sub	sp, #20
 800233e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002342:	af01      	add	r7, sp, #4
 8002344:	9303      	str	r3, [sp, #12]
 8002346:	2501      	movs	r5, #1
 8002348:	9402      	str	r4, [sp, #8]
 800234a:	4628      	mov	r0, r5
 800234c:	4639      	mov	r1, r7
 800234e:	beab      	bkpt	0x00ab
 8002350:	4605      	mov	r5, r0
 8002352:	f04f 32ff 	mov.w	r2, #4294967295
 8002356:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80023e0 <initialise_monitor_handles+0xb0>
 800235a:	4623      	mov	r3, r4
 800235c:	4c21      	ldr	r4, [pc, #132]	@ (80023e4 <initialise_monitor_handles+0xb4>)
 800235e:	f8c8 5000 	str.w	r5, [r8]
 8002362:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002366:	3301      	adds	r3, #1
 8002368:	2b14      	cmp	r3, #20
 800236a:	d1fa      	bne.n	8002362 <initialise_monitor_handles+0x32>
 800236c:	f7ff ffd4 	bl	8002318 <_has_ext_stdout_stderr>
 8002370:	4d1d      	ldr	r5, [pc, #116]	@ (80023e8 <initialise_monitor_handles+0xb8>)
 8002372:	b1d0      	cbz	r0, 80023aa <initialise_monitor_handles+0x7a>
 8002374:	f04f 0a03 	mov.w	sl, #3
 8002378:	2304      	movs	r3, #4
 800237a:	f8cd 9004 	str.w	r9, [sp, #4]
 800237e:	2601      	movs	r6, #1
 8002380:	f8cd a00c 	str.w	sl, [sp, #12]
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	4630      	mov	r0, r6
 8002388:	4639      	mov	r1, r7
 800238a:	beab      	bkpt	0x00ab
 800238c:	4683      	mov	fp, r0
 800238e:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <initialise_monitor_handles+0xbc>)
 8002390:	f8cd 9004 	str.w	r9, [sp, #4]
 8002394:	f8c3 b000 	str.w	fp, [r3]
 8002398:	2308      	movs	r3, #8
 800239a:	f8cd a00c 	str.w	sl, [sp, #12]
 800239e:	9302      	str	r3, [sp, #8]
 80023a0:	4630      	mov	r0, r6
 80023a2:	4639      	mov	r1, r7
 80023a4:	beab      	bkpt	0x00ab
 80023a6:	4606      	mov	r6, r0
 80023a8:	602e      	str	r6, [r5, #0]
 80023aa:	2600      	movs	r6, #0
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	6066      	str	r6, [r4, #4]
 80023b0:	3301      	adds	r3, #1
 80023b2:	bf02      	ittt	eq
 80023b4:	4b0d      	ldreq	r3, [pc, #52]	@ (80023ec <initialise_monitor_handles+0xbc>)
 80023b6:	681b      	ldreq	r3, [r3, #0]
 80023b8:	602b      	streq	r3, [r5, #0]
 80023ba:	f8d8 3000 	ldr.w	r3, [r8]
 80023be:	6023      	str	r3, [r4, #0]
 80023c0:	f7ff ffaa 	bl	8002318 <_has_ext_stdout_stderr>
 80023c4:	b130      	cbz	r0, 80023d4 <initialise_monitor_handles+0xa4>
 80023c6:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <initialise_monitor_handles+0xbc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80023ce:	682b      	ldr	r3, [r5, #0]
 80023d0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80023d4:	b005      	add	sp, #20
 80023d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023da:	bf00      	nop
 80023dc:	08003882 	.word	0x08003882
 80023e0:	20000158 	.word	0x20000158
 80023e4:	2000015c 	.word	0x2000015c
 80023e8:	20000150 	.word	0x20000150
 80023ec:	20000154 	.word	0x20000154

080023f0 <_isatty>:
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	f7ff fd7f 	bl	8001ef4 <findslot>
 80023f6:	2409      	movs	r4, #9
 80023f8:	4605      	mov	r5, r0
 80023fa:	b920      	cbnz	r0, 8002406 <_isatty+0x16>
 80023fc:	f000 fa6e 	bl	80028dc <__errno>
 8002400:	6004      	str	r4, [r0, #0]
 8002402:	2000      	movs	r0, #0
 8002404:	bd70      	pop	{r4, r5, r6, pc}
 8002406:	4620      	mov	r0, r4
 8002408:	4629      	mov	r1, r5
 800240a:	beab      	bkpt	0x00ab
 800240c:	4604      	mov	r4, r0
 800240e:	2c01      	cmp	r4, #1
 8002410:	4620      	mov	r0, r4
 8002412:	d0f7      	beq.n	8002404 <_isatty+0x14>
 8002414:	f000 fa62 	bl	80028dc <__errno>
 8002418:	2513      	movs	r5, #19
 800241a:	4604      	mov	r4, r0
 800241c:	2600      	movs	r6, #0
 800241e:	4628      	mov	r0, r5
 8002420:	4631      	mov	r1, r6
 8002422:	beab      	bkpt	0x00ab
 8002424:	4605      	mov	r5, r0
 8002426:	6025      	str	r5, [r4, #0]
 8002428:	e7eb      	b.n	8002402 <_isatty+0x12>
	...

0800242c <__sflush_r>:
 800242c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002432:	0716      	lsls	r6, r2, #28
 8002434:	4605      	mov	r5, r0
 8002436:	460c      	mov	r4, r1
 8002438:	d454      	bmi.n	80024e4 <__sflush_r+0xb8>
 800243a:	684b      	ldr	r3, [r1, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	dc02      	bgt.n	8002446 <__sflush_r+0x1a>
 8002440:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	dd48      	ble.n	80024d8 <__sflush_r+0xac>
 8002446:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002448:	2e00      	cmp	r6, #0
 800244a:	d045      	beq.n	80024d8 <__sflush_r+0xac>
 800244c:	2300      	movs	r3, #0
 800244e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002452:	682f      	ldr	r7, [r5, #0]
 8002454:	6a21      	ldr	r1, [r4, #32]
 8002456:	602b      	str	r3, [r5, #0]
 8002458:	d030      	beq.n	80024bc <__sflush_r+0x90>
 800245a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800245c:	89a3      	ldrh	r3, [r4, #12]
 800245e:	0759      	lsls	r1, r3, #29
 8002460:	d505      	bpl.n	800246e <__sflush_r+0x42>
 8002462:	6863      	ldr	r3, [r4, #4]
 8002464:	1ad2      	subs	r2, r2, r3
 8002466:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002468:	b10b      	cbz	r3, 800246e <__sflush_r+0x42>
 800246a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800246c:	1ad2      	subs	r2, r2, r3
 800246e:	2300      	movs	r3, #0
 8002470:	4628      	mov	r0, r5
 8002472:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002474:	6a21      	ldr	r1, [r4, #32]
 8002476:	47b0      	blx	r6
 8002478:	1c43      	adds	r3, r0, #1
 800247a:	89a3      	ldrh	r3, [r4, #12]
 800247c:	d106      	bne.n	800248c <__sflush_r+0x60>
 800247e:	6829      	ldr	r1, [r5, #0]
 8002480:	291d      	cmp	r1, #29
 8002482:	d82b      	bhi.n	80024dc <__sflush_r+0xb0>
 8002484:	4a28      	ldr	r2, [pc, #160]	@ (8002528 <__sflush_r+0xfc>)
 8002486:	40ca      	lsrs	r2, r1
 8002488:	07d6      	lsls	r6, r2, #31
 800248a:	d527      	bpl.n	80024dc <__sflush_r+0xb0>
 800248c:	2200      	movs	r2, #0
 800248e:	6062      	str	r2, [r4, #4]
 8002490:	6922      	ldr	r2, [r4, #16]
 8002492:	04d9      	lsls	r1, r3, #19
 8002494:	6022      	str	r2, [r4, #0]
 8002496:	d504      	bpl.n	80024a2 <__sflush_r+0x76>
 8002498:	1c42      	adds	r2, r0, #1
 800249a:	d101      	bne.n	80024a0 <__sflush_r+0x74>
 800249c:	682b      	ldr	r3, [r5, #0]
 800249e:	b903      	cbnz	r3, 80024a2 <__sflush_r+0x76>
 80024a0:	6560      	str	r0, [r4, #84]	@ 0x54
 80024a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80024a4:	602f      	str	r7, [r5, #0]
 80024a6:	b1b9      	cbz	r1, 80024d8 <__sflush_r+0xac>
 80024a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80024ac:	4299      	cmp	r1, r3
 80024ae:	d002      	beq.n	80024b6 <__sflush_r+0x8a>
 80024b0:	4628      	mov	r0, r5
 80024b2:	f000 fa41 	bl	8002938 <_free_r>
 80024b6:	2300      	movs	r3, #0
 80024b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80024ba:	e00d      	b.n	80024d8 <__sflush_r+0xac>
 80024bc:	2301      	movs	r3, #1
 80024be:	4628      	mov	r0, r5
 80024c0:	47b0      	blx	r6
 80024c2:	4602      	mov	r2, r0
 80024c4:	1c50      	adds	r0, r2, #1
 80024c6:	d1c9      	bne.n	800245c <__sflush_r+0x30>
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0c6      	beq.n	800245c <__sflush_r+0x30>
 80024ce:	2b1d      	cmp	r3, #29
 80024d0:	d001      	beq.n	80024d6 <__sflush_r+0xaa>
 80024d2:	2b16      	cmp	r3, #22
 80024d4:	d11d      	bne.n	8002512 <__sflush_r+0xe6>
 80024d6:	602f      	str	r7, [r5, #0]
 80024d8:	2000      	movs	r0, #0
 80024da:	e021      	b.n	8002520 <__sflush_r+0xf4>
 80024dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	e01a      	b.n	800251a <__sflush_r+0xee>
 80024e4:	690f      	ldr	r7, [r1, #16]
 80024e6:	2f00      	cmp	r7, #0
 80024e8:	d0f6      	beq.n	80024d8 <__sflush_r+0xac>
 80024ea:	0793      	lsls	r3, r2, #30
 80024ec:	bf18      	it	ne
 80024ee:	2300      	movne	r3, #0
 80024f0:	680e      	ldr	r6, [r1, #0]
 80024f2:	bf08      	it	eq
 80024f4:	694b      	ldreq	r3, [r1, #20]
 80024f6:	1bf6      	subs	r6, r6, r7
 80024f8:	600f      	str	r7, [r1, #0]
 80024fa:	608b      	str	r3, [r1, #8]
 80024fc:	2e00      	cmp	r6, #0
 80024fe:	ddeb      	ble.n	80024d8 <__sflush_r+0xac>
 8002500:	4633      	mov	r3, r6
 8002502:	463a      	mov	r2, r7
 8002504:	4628      	mov	r0, r5
 8002506:	6a21      	ldr	r1, [r4, #32]
 8002508:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800250c:	47e0      	blx	ip
 800250e:	2800      	cmp	r0, #0
 8002510:	dc07      	bgt.n	8002522 <__sflush_r+0xf6>
 8002512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800251a:	f04f 30ff 	mov.w	r0, #4294967295
 800251e:	81a3      	strh	r3, [r4, #12]
 8002520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002522:	4407      	add	r7, r0
 8002524:	1a36      	subs	r6, r6, r0
 8002526:	e7e9      	b.n	80024fc <__sflush_r+0xd0>
 8002528:	20400001 	.word	0x20400001

0800252c <_fflush_r>:
 800252c:	b538      	push	{r3, r4, r5, lr}
 800252e:	690b      	ldr	r3, [r1, #16]
 8002530:	4605      	mov	r5, r0
 8002532:	460c      	mov	r4, r1
 8002534:	b913      	cbnz	r3, 800253c <_fflush_r+0x10>
 8002536:	2500      	movs	r5, #0
 8002538:	4628      	mov	r0, r5
 800253a:	bd38      	pop	{r3, r4, r5, pc}
 800253c:	b118      	cbz	r0, 8002546 <_fflush_r+0x1a>
 800253e:	6a03      	ldr	r3, [r0, #32]
 8002540:	b90b      	cbnz	r3, 8002546 <_fflush_r+0x1a>
 8002542:	f000 f8bb 	bl	80026bc <__sinit>
 8002546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f3      	beq.n	8002536 <_fflush_r+0xa>
 800254e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002550:	07d0      	lsls	r0, r2, #31
 8002552:	d404      	bmi.n	800255e <_fflush_r+0x32>
 8002554:	0599      	lsls	r1, r3, #22
 8002556:	d402      	bmi.n	800255e <_fflush_r+0x32>
 8002558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800255a:	f000 f9ea 	bl	8002932 <__retarget_lock_acquire_recursive>
 800255e:	4628      	mov	r0, r5
 8002560:	4621      	mov	r1, r4
 8002562:	f7ff ff63 	bl	800242c <__sflush_r>
 8002566:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002568:	4605      	mov	r5, r0
 800256a:	07da      	lsls	r2, r3, #31
 800256c:	d4e4      	bmi.n	8002538 <_fflush_r+0xc>
 800256e:	89a3      	ldrh	r3, [r4, #12]
 8002570:	059b      	lsls	r3, r3, #22
 8002572:	d4e1      	bmi.n	8002538 <_fflush_r+0xc>
 8002574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002576:	f000 f9dd 	bl	8002934 <__retarget_lock_release_recursive>
 800257a:	e7dd      	b.n	8002538 <_fflush_r+0xc>

0800257c <fflush>:
 800257c:	4601      	mov	r1, r0
 800257e:	b920      	cbnz	r0, 800258a <fflush+0xe>
 8002580:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <fflush+0x18>)
 8002582:	4905      	ldr	r1, [pc, #20]	@ (8002598 <fflush+0x1c>)
 8002584:	4805      	ldr	r0, [pc, #20]	@ (800259c <fflush+0x20>)
 8002586:	f000 b8b1 	b.w	80026ec <_fwalk_sglue>
 800258a:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <fflush+0x24>)
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	f7ff bfcd 	b.w	800252c <_fflush_r>
 8002592:	bf00      	nop
 8002594:	20000024 	.word	0x20000024
 8002598:	0800252d 	.word	0x0800252d
 800259c:	20000034 	.word	0x20000034
 80025a0:	20000030 	.word	0x20000030

080025a4 <std>:
 80025a4:	2300      	movs	r3, #0
 80025a6:	b510      	push	{r4, lr}
 80025a8:	4604      	mov	r4, r0
 80025aa:	e9c0 3300 	strd	r3, r3, [r0]
 80025ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025b2:	6083      	str	r3, [r0, #8]
 80025b4:	8181      	strh	r1, [r0, #12]
 80025b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80025b8:	81c2      	strh	r2, [r0, #14]
 80025ba:	6183      	str	r3, [r0, #24]
 80025bc:	4619      	mov	r1, r3
 80025be:	2208      	movs	r2, #8
 80025c0:	305c      	adds	r0, #92	@ 0x5c
 80025c2:	f000 f93c 	bl	800283e <memset>
 80025c6:	4b0d      	ldr	r3, [pc, #52]	@ (80025fc <std+0x58>)
 80025c8:	6224      	str	r4, [r4, #32]
 80025ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <std+0x5c>)
 80025ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80025d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002604 <std+0x60>)
 80025d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80025d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <std+0x64>)
 80025d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80025d8:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <std+0x68>)
 80025da:	429c      	cmp	r4, r3
 80025dc:	d006      	beq.n	80025ec <std+0x48>
 80025de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80025e2:	4294      	cmp	r4, r2
 80025e4:	d002      	beq.n	80025ec <std+0x48>
 80025e6:	33d0      	adds	r3, #208	@ 0xd0
 80025e8:	429c      	cmp	r4, r3
 80025ea:	d105      	bne.n	80025f8 <std+0x54>
 80025ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80025f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f4:	f000 b99c 	b.w	8002930 <__retarget_lock_init_recursive>
 80025f8:	bd10      	pop	{r4, pc}
 80025fa:	bf00      	nop
 80025fc:	080027b9 	.word	0x080027b9
 8002600:	080027db 	.word	0x080027db
 8002604:	08002813 	.word	0x08002813
 8002608:	08002837 	.word	0x08002837
 800260c:	200001fc 	.word	0x200001fc

08002610 <stdio_exit_handler>:
 8002610:	4a02      	ldr	r2, [pc, #8]	@ (800261c <stdio_exit_handler+0xc>)
 8002612:	4903      	ldr	r1, [pc, #12]	@ (8002620 <stdio_exit_handler+0x10>)
 8002614:	4803      	ldr	r0, [pc, #12]	@ (8002624 <stdio_exit_handler+0x14>)
 8002616:	f000 b869 	b.w	80026ec <_fwalk_sglue>
 800261a:	bf00      	nop
 800261c:	20000024 	.word	0x20000024
 8002620:	0800252d 	.word	0x0800252d
 8002624:	20000034 	.word	0x20000034

08002628 <cleanup_stdio>:
 8002628:	6841      	ldr	r1, [r0, #4]
 800262a:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <cleanup_stdio+0x34>)
 800262c:	b510      	push	{r4, lr}
 800262e:	4299      	cmp	r1, r3
 8002630:	4604      	mov	r4, r0
 8002632:	d001      	beq.n	8002638 <cleanup_stdio+0x10>
 8002634:	f7ff ff7a 	bl	800252c <_fflush_r>
 8002638:	68a1      	ldr	r1, [r4, #8]
 800263a:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <cleanup_stdio+0x38>)
 800263c:	4299      	cmp	r1, r3
 800263e:	d002      	beq.n	8002646 <cleanup_stdio+0x1e>
 8002640:	4620      	mov	r0, r4
 8002642:	f7ff ff73 	bl	800252c <_fflush_r>
 8002646:	68e1      	ldr	r1, [r4, #12]
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <cleanup_stdio+0x3c>)
 800264a:	4299      	cmp	r1, r3
 800264c:	d004      	beq.n	8002658 <cleanup_stdio+0x30>
 800264e:	4620      	mov	r0, r4
 8002650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002654:	f7ff bf6a 	b.w	800252c <_fflush_r>
 8002658:	bd10      	pop	{r4, pc}
 800265a:	bf00      	nop
 800265c:	200001fc 	.word	0x200001fc
 8002660:	20000264 	.word	0x20000264
 8002664:	200002cc 	.word	0x200002cc

08002668 <global_stdio_init.part.0>:
 8002668:	b510      	push	{r4, lr}
 800266a:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <global_stdio_init.part.0+0x30>)
 800266c:	4c0b      	ldr	r4, [pc, #44]	@ (800269c <global_stdio_init.part.0+0x34>)
 800266e:	4a0c      	ldr	r2, [pc, #48]	@ (80026a0 <global_stdio_init.part.0+0x38>)
 8002670:	4620      	mov	r0, r4
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	2104      	movs	r1, #4
 8002676:	2200      	movs	r2, #0
 8002678:	f7ff ff94 	bl	80025a4 <std>
 800267c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002680:	2201      	movs	r2, #1
 8002682:	2109      	movs	r1, #9
 8002684:	f7ff ff8e 	bl	80025a4 <std>
 8002688:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800268c:	2202      	movs	r2, #2
 800268e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002692:	2112      	movs	r1, #18
 8002694:	f7ff bf86 	b.w	80025a4 <std>
 8002698:	20000334 	.word	0x20000334
 800269c:	200001fc 	.word	0x200001fc
 80026a0:	08002611 	.word	0x08002611

080026a4 <__sfp_lock_acquire>:
 80026a4:	4801      	ldr	r0, [pc, #4]	@ (80026ac <__sfp_lock_acquire+0x8>)
 80026a6:	f000 b944 	b.w	8002932 <__retarget_lock_acquire_recursive>
 80026aa:	bf00      	nop
 80026ac:	2000033d 	.word	0x2000033d

080026b0 <__sfp_lock_release>:
 80026b0:	4801      	ldr	r0, [pc, #4]	@ (80026b8 <__sfp_lock_release+0x8>)
 80026b2:	f000 b93f 	b.w	8002934 <__retarget_lock_release_recursive>
 80026b6:	bf00      	nop
 80026b8:	2000033d 	.word	0x2000033d

080026bc <__sinit>:
 80026bc:	b510      	push	{r4, lr}
 80026be:	4604      	mov	r4, r0
 80026c0:	f7ff fff0 	bl	80026a4 <__sfp_lock_acquire>
 80026c4:	6a23      	ldr	r3, [r4, #32]
 80026c6:	b11b      	cbz	r3, 80026d0 <__sinit+0x14>
 80026c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026cc:	f7ff bff0 	b.w	80026b0 <__sfp_lock_release>
 80026d0:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <__sinit+0x28>)
 80026d2:	6223      	str	r3, [r4, #32]
 80026d4:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <__sinit+0x2c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f5      	bne.n	80026c8 <__sinit+0xc>
 80026dc:	f7ff ffc4 	bl	8002668 <global_stdio_init.part.0>
 80026e0:	e7f2      	b.n	80026c8 <__sinit+0xc>
 80026e2:	bf00      	nop
 80026e4:	08002629 	.word	0x08002629
 80026e8:	20000334 	.word	0x20000334

080026ec <_fwalk_sglue>:
 80026ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026f0:	4607      	mov	r7, r0
 80026f2:	4688      	mov	r8, r1
 80026f4:	4614      	mov	r4, r2
 80026f6:	2600      	movs	r6, #0
 80026f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026fc:	f1b9 0901 	subs.w	r9, r9, #1
 8002700:	d505      	bpl.n	800270e <_fwalk_sglue+0x22>
 8002702:	6824      	ldr	r4, [r4, #0]
 8002704:	2c00      	cmp	r4, #0
 8002706:	d1f7      	bne.n	80026f8 <_fwalk_sglue+0xc>
 8002708:	4630      	mov	r0, r6
 800270a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800270e:	89ab      	ldrh	r3, [r5, #12]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d907      	bls.n	8002724 <_fwalk_sglue+0x38>
 8002714:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002718:	3301      	adds	r3, #1
 800271a:	d003      	beq.n	8002724 <_fwalk_sglue+0x38>
 800271c:	4629      	mov	r1, r5
 800271e:	4638      	mov	r0, r7
 8002720:	47c0      	blx	r8
 8002722:	4306      	orrs	r6, r0
 8002724:	3568      	adds	r5, #104	@ 0x68
 8002726:	e7e9      	b.n	80026fc <_fwalk_sglue+0x10>

08002728 <iprintf>:
 8002728:	b40f      	push	{r0, r1, r2, r3}
 800272a:	b507      	push	{r0, r1, r2, lr}
 800272c:	4906      	ldr	r1, [pc, #24]	@ (8002748 <iprintf+0x20>)
 800272e:	ab04      	add	r3, sp, #16
 8002730:	6808      	ldr	r0, [r1, #0]
 8002732:	f853 2b04 	ldr.w	r2, [r3], #4
 8002736:	6881      	ldr	r1, [r0, #8]
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	f000 fb73 	bl	8002e24 <_vfiprintf_r>
 800273e:	b003      	add	sp, #12
 8002740:	f85d eb04 	ldr.w	lr, [sp], #4
 8002744:	b004      	add	sp, #16
 8002746:	4770      	bx	lr
 8002748:	20000030 	.word	0x20000030

0800274c <sniprintf>:
 800274c:	b40c      	push	{r2, r3}
 800274e:	b530      	push	{r4, r5, lr}
 8002750:	4b18      	ldr	r3, [pc, #96]	@ (80027b4 <sniprintf+0x68>)
 8002752:	1e0c      	subs	r4, r1, #0
 8002754:	681d      	ldr	r5, [r3, #0]
 8002756:	b09d      	sub	sp, #116	@ 0x74
 8002758:	da08      	bge.n	800276c <sniprintf+0x20>
 800275a:	238b      	movs	r3, #139	@ 0x8b
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	602b      	str	r3, [r5, #0]
 8002762:	b01d      	add	sp, #116	@ 0x74
 8002764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002768:	b002      	add	sp, #8
 800276a:	4770      	bx	lr
 800276c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002770:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	931b      	str	r3, [sp, #108]	@ 0x6c
 800277a:	bf0c      	ite	eq
 800277c:	4623      	moveq	r3, r4
 800277e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002782:	9304      	str	r3, [sp, #16]
 8002784:	9307      	str	r3, [sp, #28]
 8002786:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800278a:	9002      	str	r0, [sp, #8]
 800278c:	9006      	str	r0, [sp, #24]
 800278e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002792:	4628      	mov	r0, r5
 8002794:	ab21      	add	r3, sp, #132	@ 0x84
 8002796:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002798:	a902      	add	r1, sp, #8
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	f000 fa1e 	bl	8002bdc <_svfiprintf_r>
 80027a0:	1c43      	adds	r3, r0, #1
 80027a2:	bfbc      	itt	lt
 80027a4:	238b      	movlt	r3, #139	@ 0x8b
 80027a6:	602b      	strlt	r3, [r5, #0]
 80027a8:	2c00      	cmp	r4, #0
 80027aa:	d0da      	beq.n	8002762 <sniprintf+0x16>
 80027ac:	2200      	movs	r2, #0
 80027ae:	9b02      	ldr	r3, [sp, #8]
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e7d6      	b.n	8002762 <sniprintf+0x16>
 80027b4:	20000030 	.word	0x20000030

080027b8 <__sread>:
 80027b8:	b510      	push	{r4, lr}
 80027ba:	460c      	mov	r4, r1
 80027bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027c0:	f000 f868 	bl	8002894 <_read_r>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	bfab      	itete	ge
 80027c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80027ca:	89a3      	ldrhlt	r3, [r4, #12]
 80027cc:	181b      	addge	r3, r3, r0
 80027ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80027d2:	bfac      	ite	ge
 80027d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80027d6:	81a3      	strhlt	r3, [r4, #12]
 80027d8:	bd10      	pop	{r4, pc}

080027da <__swrite>:
 80027da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027de:	461f      	mov	r7, r3
 80027e0:	898b      	ldrh	r3, [r1, #12]
 80027e2:	4605      	mov	r5, r0
 80027e4:	05db      	lsls	r3, r3, #23
 80027e6:	460c      	mov	r4, r1
 80027e8:	4616      	mov	r6, r2
 80027ea:	d505      	bpl.n	80027f8 <__swrite+0x1e>
 80027ec:	2302      	movs	r3, #2
 80027ee:	2200      	movs	r2, #0
 80027f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027f4:	f000 f83c 	bl	8002870 <_lseek_r>
 80027f8:	89a3      	ldrh	r3, [r4, #12]
 80027fa:	4632      	mov	r2, r6
 80027fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002800:	81a3      	strh	r3, [r4, #12]
 8002802:	4628      	mov	r0, r5
 8002804:	463b      	mov	r3, r7
 8002806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800280a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800280e:	f000 b853 	b.w	80028b8 <_write_r>

08002812 <__sseek>:
 8002812:	b510      	push	{r4, lr}
 8002814:	460c      	mov	r4, r1
 8002816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800281a:	f000 f829 	bl	8002870 <_lseek_r>
 800281e:	1c43      	adds	r3, r0, #1
 8002820:	89a3      	ldrh	r3, [r4, #12]
 8002822:	bf15      	itete	ne
 8002824:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002826:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800282a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800282e:	81a3      	strheq	r3, [r4, #12]
 8002830:	bf18      	it	ne
 8002832:	81a3      	strhne	r3, [r4, #12]
 8002834:	bd10      	pop	{r4, pc}

08002836 <__sclose>:
 8002836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800283a:	f000 b809 	b.w	8002850 <_close_r>

0800283e <memset>:
 800283e:	4603      	mov	r3, r0
 8002840:	4402      	add	r2, r0
 8002842:	4293      	cmp	r3, r2
 8002844:	d100      	bne.n	8002848 <memset+0xa>
 8002846:	4770      	bx	lr
 8002848:	f803 1b01 	strb.w	r1, [r3], #1
 800284c:	e7f9      	b.n	8002842 <memset+0x4>
	...

08002850 <_close_r>:
 8002850:	b538      	push	{r3, r4, r5, lr}
 8002852:	2300      	movs	r3, #0
 8002854:	4d05      	ldr	r5, [pc, #20]	@ (800286c <_close_r+0x1c>)
 8002856:	4604      	mov	r4, r0
 8002858:	4608      	mov	r0, r1
 800285a:	602b      	str	r3, [r5, #0]
 800285c:	f7ff fc1c 	bl	8002098 <_close>
 8002860:	1c43      	adds	r3, r0, #1
 8002862:	d102      	bne.n	800286a <_close_r+0x1a>
 8002864:	682b      	ldr	r3, [r5, #0]
 8002866:	b103      	cbz	r3, 800286a <_close_r+0x1a>
 8002868:	6023      	str	r3, [r4, #0]
 800286a:	bd38      	pop	{r3, r4, r5, pc}
 800286c:	20000338 	.word	0x20000338

08002870 <_lseek_r>:
 8002870:	b538      	push	{r3, r4, r5, lr}
 8002872:	4604      	mov	r4, r0
 8002874:	4608      	mov	r0, r1
 8002876:	4611      	mov	r1, r2
 8002878:	2200      	movs	r2, #0
 800287a:	4d05      	ldr	r5, [pc, #20]	@ (8002890 <_lseek_r+0x20>)
 800287c:	602a      	str	r2, [r5, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	f7ff fbcb 	bl	800201a <_lseek>
 8002884:	1c43      	adds	r3, r0, #1
 8002886:	d102      	bne.n	800288e <_lseek_r+0x1e>
 8002888:	682b      	ldr	r3, [r5, #0]
 800288a:	b103      	cbz	r3, 800288e <_lseek_r+0x1e>
 800288c:	6023      	str	r3, [r4, #0]
 800288e:	bd38      	pop	{r3, r4, r5, pc}
 8002890:	20000338 	.word	0x20000338

08002894 <_read_r>:
 8002894:	b538      	push	{r3, r4, r5, lr}
 8002896:	4604      	mov	r4, r0
 8002898:	4608      	mov	r0, r1
 800289a:	4611      	mov	r1, r2
 800289c:	2200      	movs	r2, #0
 800289e:	4d05      	ldr	r5, [pc, #20]	@ (80028b4 <_read_r+0x20>)
 80028a0:	602a      	str	r2, [r5, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f7ff fb63 	bl	8001f6e <_read>
 80028a8:	1c43      	adds	r3, r0, #1
 80028aa:	d102      	bne.n	80028b2 <_read_r+0x1e>
 80028ac:	682b      	ldr	r3, [r5, #0]
 80028ae:	b103      	cbz	r3, 80028b2 <_read_r+0x1e>
 80028b0:	6023      	str	r3, [r4, #0]
 80028b2:	bd38      	pop	{r3, r4, r5, pc}
 80028b4:	20000338 	.word	0x20000338

080028b8 <_write_r>:
 80028b8:	b538      	push	{r3, r4, r5, lr}
 80028ba:	4604      	mov	r4, r0
 80028bc:	4608      	mov	r0, r1
 80028be:	4611      	mov	r1, r2
 80028c0:	2200      	movs	r2, #0
 80028c2:	4d05      	ldr	r5, [pc, #20]	@ (80028d8 <_write_r+0x20>)
 80028c4:	602a      	str	r2, [r5, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f7ff fbb9 	bl	800203e <_write>
 80028cc:	1c43      	adds	r3, r0, #1
 80028ce:	d102      	bne.n	80028d6 <_write_r+0x1e>
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	b103      	cbz	r3, 80028d6 <_write_r+0x1e>
 80028d4:	6023      	str	r3, [r4, #0]
 80028d6:	bd38      	pop	{r3, r4, r5, pc}
 80028d8:	20000338 	.word	0x20000338

080028dc <__errno>:
 80028dc:	4b01      	ldr	r3, [pc, #4]	@ (80028e4 <__errno+0x8>)
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000030 	.word	0x20000030

080028e8 <__libc_init_array>:
 80028e8:	b570      	push	{r4, r5, r6, lr}
 80028ea:	2600      	movs	r6, #0
 80028ec:	4d0c      	ldr	r5, [pc, #48]	@ (8002920 <__libc_init_array+0x38>)
 80028ee:	4c0d      	ldr	r4, [pc, #52]	@ (8002924 <__libc_init_array+0x3c>)
 80028f0:	1b64      	subs	r4, r4, r5
 80028f2:	10a4      	asrs	r4, r4, #2
 80028f4:	42a6      	cmp	r6, r4
 80028f6:	d109      	bne.n	800290c <__libc_init_array+0x24>
 80028f8:	f000 fed0 	bl	800369c <_init>
 80028fc:	2600      	movs	r6, #0
 80028fe:	4d0a      	ldr	r5, [pc, #40]	@ (8002928 <__libc_init_array+0x40>)
 8002900:	4c0a      	ldr	r4, [pc, #40]	@ (800292c <__libc_init_array+0x44>)
 8002902:	1b64      	subs	r4, r4, r5
 8002904:	10a4      	asrs	r4, r4, #2
 8002906:	42a6      	cmp	r6, r4
 8002908:	d105      	bne.n	8002916 <__libc_init_array+0x2e>
 800290a:	bd70      	pop	{r4, r5, r6, pc}
 800290c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002910:	4798      	blx	r3
 8002912:	3601      	adds	r6, #1
 8002914:	e7ee      	b.n	80028f4 <__libc_init_array+0xc>
 8002916:	f855 3b04 	ldr.w	r3, [r5], #4
 800291a:	4798      	blx	r3
 800291c:	3601      	adds	r6, #1
 800291e:	e7f2      	b.n	8002906 <__libc_init_array+0x1e>
 8002920:	080038c4 	.word	0x080038c4
 8002924:	080038c4 	.word	0x080038c4
 8002928:	080038c4 	.word	0x080038c4
 800292c:	080038c8 	.word	0x080038c8

08002930 <__retarget_lock_init_recursive>:
 8002930:	4770      	bx	lr

08002932 <__retarget_lock_acquire_recursive>:
 8002932:	4770      	bx	lr

08002934 <__retarget_lock_release_recursive>:
 8002934:	4770      	bx	lr
	...

08002938 <_free_r>:
 8002938:	b538      	push	{r3, r4, r5, lr}
 800293a:	4605      	mov	r5, r0
 800293c:	2900      	cmp	r1, #0
 800293e:	d040      	beq.n	80029c2 <_free_r+0x8a>
 8002940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002944:	1f0c      	subs	r4, r1, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	bfb8      	it	lt
 800294a:	18e4      	addlt	r4, r4, r3
 800294c:	f000 f8de 	bl	8002b0c <__malloc_lock>
 8002950:	4a1c      	ldr	r2, [pc, #112]	@ (80029c4 <_free_r+0x8c>)
 8002952:	6813      	ldr	r3, [r2, #0]
 8002954:	b933      	cbnz	r3, 8002964 <_free_r+0x2c>
 8002956:	6063      	str	r3, [r4, #4]
 8002958:	6014      	str	r4, [r2, #0]
 800295a:	4628      	mov	r0, r5
 800295c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002960:	f000 b8da 	b.w	8002b18 <__malloc_unlock>
 8002964:	42a3      	cmp	r3, r4
 8002966:	d908      	bls.n	800297a <_free_r+0x42>
 8002968:	6820      	ldr	r0, [r4, #0]
 800296a:	1821      	adds	r1, r4, r0
 800296c:	428b      	cmp	r3, r1
 800296e:	bf01      	itttt	eq
 8002970:	6819      	ldreq	r1, [r3, #0]
 8002972:	685b      	ldreq	r3, [r3, #4]
 8002974:	1809      	addeq	r1, r1, r0
 8002976:	6021      	streq	r1, [r4, #0]
 8002978:	e7ed      	b.n	8002956 <_free_r+0x1e>
 800297a:	461a      	mov	r2, r3
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	b10b      	cbz	r3, 8002984 <_free_r+0x4c>
 8002980:	42a3      	cmp	r3, r4
 8002982:	d9fa      	bls.n	800297a <_free_r+0x42>
 8002984:	6811      	ldr	r1, [r2, #0]
 8002986:	1850      	adds	r0, r2, r1
 8002988:	42a0      	cmp	r0, r4
 800298a:	d10b      	bne.n	80029a4 <_free_r+0x6c>
 800298c:	6820      	ldr	r0, [r4, #0]
 800298e:	4401      	add	r1, r0
 8002990:	1850      	adds	r0, r2, r1
 8002992:	4283      	cmp	r3, r0
 8002994:	6011      	str	r1, [r2, #0]
 8002996:	d1e0      	bne.n	800295a <_free_r+0x22>
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4408      	add	r0, r1
 800299e:	6010      	str	r0, [r2, #0]
 80029a0:	6053      	str	r3, [r2, #4]
 80029a2:	e7da      	b.n	800295a <_free_r+0x22>
 80029a4:	d902      	bls.n	80029ac <_free_r+0x74>
 80029a6:	230c      	movs	r3, #12
 80029a8:	602b      	str	r3, [r5, #0]
 80029aa:	e7d6      	b.n	800295a <_free_r+0x22>
 80029ac:	6820      	ldr	r0, [r4, #0]
 80029ae:	1821      	adds	r1, r4, r0
 80029b0:	428b      	cmp	r3, r1
 80029b2:	bf01      	itttt	eq
 80029b4:	6819      	ldreq	r1, [r3, #0]
 80029b6:	685b      	ldreq	r3, [r3, #4]
 80029b8:	1809      	addeq	r1, r1, r0
 80029ba:	6021      	streq	r1, [r4, #0]
 80029bc:	6063      	str	r3, [r4, #4]
 80029be:	6054      	str	r4, [r2, #4]
 80029c0:	e7cb      	b.n	800295a <_free_r+0x22>
 80029c2:	bd38      	pop	{r3, r4, r5, pc}
 80029c4:	20000344 	.word	0x20000344

080029c8 <sbrk_aligned>:
 80029c8:	b570      	push	{r4, r5, r6, lr}
 80029ca:	4e0f      	ldr	r6, [pc, #60]	@ (8002a08 <sbrk_aligned+0x40>)
 80029cc:	460c      	mov	r4, r1
 80029ce:	6831      	ldr	r1, [r6, #0]
 80029d0:	4605      	mov	r5, r0
 80029d2:	b911      	cbnz	r1, 80029da <sbrk_aligned+0x12>
 80029d4:	f000 fd7c 	bl	80034d0 <_sbrk_r>
 80029d8:	6030      	str	r0, [r6, #0]
 80029da:	4621      	mov	r1, r4
 80029dc:	4628      	mov	r0, r5
 80029de:	f000 fd77 	bl	80034d0 <_sbrk_r>
 80029e2:	1c43      	adds	r3, r0, #1
 80029e4:	d103      	bne.n	80029ee <sbrk_aligned+0x26>
 80029e6:	f04f 34ff 	mov.w	r4, #4294967295
 80029ea:	4620      	mov	r0, r4
 80029ec:	bd70      	pop	{r4, r5, r6, pc}
 80029ee:	1cc4      	adds	r4, r0, #3
 80029f0:	f024 0403 	bic.w	r4, r4, #3
 80029f4:	42a0      	cmp	r0, r4
 80029f6:	d0f8      	beq.n	80029ea <sbrk_aligned+0x22>
 80029f8:	1a21      	subs	r1, r4, r0
 80029fa:	4628      	mov	r0, r5
 80029fc:	f000 fd68 	bl	80034d0 <_sbrk_r>
 8002a00:	3001      	adds	r0, #1
 8002a02:	d1f2      	bne.n	80029ea <sbrk_aligned+0x22>
 8002a04:	e7ef      	b.n	80029e6 <sbrk_aligned+0x1e>
 8002a06:	bf00      	nop
 8002a08:	20000340 	.word	0x20000340

08002a0c <_malloc_r>:
 8002a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a10:	1ccd      	adds	r5, r1, #3
 8002a12:	f025 0503 	bic.w	r5, r5, #3
 8002a16:	3508      	adds	r5, #8
 8002a18:	2d0c      	cmp	r5, #12
 8002a1a:	bf38      	it	cc
 8002a1c:	250c      	movcc	r5, #12
 8002a1e:	2d00      	cmp	r5, #0
 8002a20:	4606      	mov	r6, r0
 8002a22:	db01      	blt.n	8002a28 <_malloc_r+0x1c>
 8002a24:	42a9      	cmp	r1, r5
 8002a26:	d904      	bls.n	8002a32 <_malloc_r+0x26>
 8002a28:	230c      	movs	r3, #12
 8002a2a:	6033      	str	r3, [r6, #0]
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b08 <_malloc_r+0xfc>
 8002a36:	f000 f869 	bl	8002b0c <__malloc_lock>
 8002a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8002a3e:	461c      	mov	r4, r3
 8002a40:	bb44      	cbnz	r4, 8002a94 <_malloc_r+0x88>
 8002a42:	4629      	mov	r1, r5
 8002a44:	4630      	mov	r0, r6
 8002a46:	f7ff ffbf 	bl	80029c8 <sbrk_aligned>
 8002a4a:	1c43      	adds	r3, r0, #1
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	d158      	bne.n	8002b02 <_malloc_r+0xf6>
 8002a50:	f8d8 4000 	ldr.w	r4, [r8]
 8002a54:	4627      	mov	r7, r4
 8002a56:	2f00      	cmp	r7, #0
 8002a58:	d143      	bne.n	8002ae2 <_malloc_r+0xd6>
 8002a5a:	2c00      	cmp	r4, #0
 8002a5c:	d04b      	beq.n	8002af6 <_malloc_r+0xea>
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	4639      	mov	r1, r7
 8002a62:	4630      	mov	r0, r6
 8002a64:	eb04 0903 	add.w	r9, r4, r3
 8002a68:	f000 fd32 	bl	80034d0 <_sbrk_r>
 8002a6c:	4581      	cmp	r9, r0
 8002a6e:	d142      	bne.n	8002af6 <_malloc_r+0xea>
 8002a70:	6821      	ldr	r1, [r4, #0]
 8002a72:	4630      	mov	r0, r6
 8002a74:	1a6d      	subs	r5, r5, r1
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7ff ffa6 	bl	80029c8 <sbrk_aligned>
 8002a7c:	3001      	adds	r0, #1
 8002a7e:	d03a      	beq.n	8002af6 <_malloc_r+0xea>
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	442b      	add	r3, r5
 8002a84:	6023      	str	r3, [r4, #0]
 8002a86:	f8d8 3000 	ldr.w	r3, [r8]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	bb62      	cbnz	r2, 8002ae8 <_malloc_r+0xdc>
 8002a8e:	f8c8 7000 	str.w	r7, [r8]
 8002a92:	e00f      	b.n	8002ab4 <_malloc_r+0xa8>
 8002a94:	6822      	ldr	r2, [r4, #0]
 8002a96:	1b52      	subs	r2, r2, r5
 8002a98:	d420      	bmi.n	8002adc <_malloc_r+0xd0>
 8002a9a:	2a0b      	cmp	r2, #11
 8002a9c:	d917      	bls.n	8002ace <_malloc_r+0xc2>
 8002a9e:	1961      	adds	r1, r4, r5
 8002aa0:	42a3      	cmp	r3, r4
 8002aa2:	6025      	str	r5, [r4, #0]
 8002aa4:	bf18      	it	ne
 8002aa6:	6059      	strne	r1, [r3, #4]
 8002aa8:	6863      	ldr	r3, [r4, #4]
 8002aaa:	bf08      	it	eq
 8002aac:	f8c8 1000 	streq.w	r1, [r8]
 8002ab0:	5162      	str	r2, [r4, r5]
 8002ab2:	604b      	str	r3, [r1, #4]
 8002ab4:	4630      	mov	r0, r6
 8002ab6:	f000 f82f 	bl	8002b18 <__malloc_unlock>
 8002aba:	f104 000b 	add.w	r0, r4, #11
 8002abe:	1d23      	adds	r3, r4, #4
 8002ac0:	f020 0007 	bic.w	r0, r0, #7
 8002ac4:	1ac2      	subs	r2, r0, r3
 8002ac6:	bf1c      	itt	ne
 8002ac8:	1a1b      	subne	r3, r3, r0
 8002aca:	50a3      	strne	r3, [r4, r2]
 8002acc:	e7af      	b.n	8002a2e <_malloc_r+0x22>
 8002ace:	6862      	ldr	r2, [r4, #4]
 8002ad0:	42a3      	cmp	r3, r4
 8002ad2:	bf0c      	ite	eq
 8002ad4:	f8c8 2000 	streq.w	r2, [r8]
 8002ad8:	605a      	strne	r2, [r3, #4]
 8002ada:	e7eb      	b.n	8002ab4 <_malloc_r+0xa8>
 8002adc:	4623      	mov	r3, r4
 8002ade:	6864      	ldr	r4, [r4, #4]
 8002ae0:	e7ae      	b.n	8002a40 <_malloc_r+0x34>
 8002ae2:	463c      	mov	r4, r7
 8002ae4:	687f      	ldr	r7, [r7, #4]
 8002ae6:	e7b6      	b.n	8002a56 <_malloc_r+0x4a>
 8002ae8:	461a      	mov	r2, r3
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	42a3      	cmp	r3, r4
 8002aee:	d1fb      	bne.n	8002ae8 <_malloc_r+0xdc>
 8002af0:	2300      	movs	r3, #0
 8002af2:	6053      	str	r3, [r2, #4]
 8002af4:	e7de      	b.n	8002ab4 <_malloc_r+0xa8>
 8002af6:	230c      	movs	r3, #12
 8002af8:	4630      	mov	r0, r6
 8002afa:	6033      	str	r3, [r6, #0]
 8002afc:	f000 f80c 	bl	8002b18 <__malloc_unlock>
 8002b00:	e794      	b.n	8002a2c <_malloc_r+0x20>
 8002b02:	6005      	str	r5, [r0, #0]
 8002b04:	e7d6      	b.n	8002ab4 <_malloc_r+0xa8>
 8002b06:	bf00      	nop
 8002b08:	20000344 	.word	0x20000344

08002b0c <__malloc_lock>:
 8002b0c:	4801      	ldr	r0, [pc, #4]	@ (8002b14 <__malloc_lock+0x8>)
 8002b0e:	f7ff bf10 	b.w	8002932 <__retarget_lock_acquire_recursive>
 8002b12:	bf00      	nop
 8002b14:	2000033c 	.word	0x2000033c

08002b18 <__malloc_unlock>:
 8002b18:	4801      	ldr	r0, [pc, #4]	@ (8002b20 <__malloc_unlock+0x8>)
 8002b1a:	f7ff bf0b 	b.w	8002934 <__retarget_lock_release_recursive>
 8002b1e:	bf00      	nop
 8002b20:	2000033c 	.word	0x2000033c

08002b24 <__ssputs_r>:
 8002b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b28:	461f      	mov	r7, r3
 8002b2a:	688e      	ldr	r6, [r1, #8]
 8002b2c:	4682      	mov	sl, r0
 8002b2e:	42be      	cmp	r6, r7
 8002b30:	460c      	mov	r4, r1
 8002b32:	4690      	mov	r8, r2
 8002b34:	680b      	ldr	r3, [r1, #0]
 8002b36:	d82d      	bhi.n	8002b94 <__ssputs_r+0x70>
 8002b38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002b40:	d026      	beq.n	8002b90 <__ssputs_r+0x6c>
 8002b42:	6965      	ldr	r5, [r4, #20]
 8002b44:	6909      	ldr	r1, [r1, #16]
 8002b46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b4a:	eba3 0901 	sub.w	r9, r3, r1
 8002b4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b52:	1c7b      	adds	r3, r7, #1
 8002b54:	444b      	add	r3, r9
 8002b56:	106d      	asrs	r5, r5, #1
 8002b58:	429d      	cmp	r5, r3
 8002b5a:	bf38      	it	cc
 8002b5c:	461d      	movcc	r5, r3
 8002b5e:	0553      	lsls	r3, r2, #21
 8002b60:	d527      	bpl.n	8002bb2 <__ssputs_r+0x8e>
 8002b62:	4629      	mov	r1, r5
 8002b64:	f7ff ff52 	bl	8002a0c <_malloc_r>
 8002b68:	4606      	mov	r6, r0
 8002b6a:	b360      	cbz	r0, 8002bc6 <__ssputs_r+0xa2>
 8002b6c:	464a      	mov	r2, r9
 8002b6e:	6921      	ldr	r1, [r4, #16]
 8002b70:	f000 fccc 	bl	800350c <memcpy>
 8002b74:	89a3      	ldrh	r3, [r4, #12]
 8002b76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b7e:	81a3      	strh	r3, [r4, #12]
 8002b80:	6126      	str	r6, [r4, #16]
 8002b82:	444e      	add	r6, r9
 8002b84:	6026      	str	r6, [r4, #0]
 8002b86:	463e      	mov	r6, r7
 8002b88:	6165      	str	r5, [r4, #20]
 8002b8a:	eba5 0509 	sub.w	r5, r5, r9
 8002b8e:	60a5      	str	r5, [r4, #8]
 8002b90:	42be      	cmp	r6, r7
 8002b92:	d900      	bls.n	8002b96 <__ssputs_r+0x72>
 8002b94:	463e      	mov	r6, r7
 8002b96:	4632      	mov	r2, r6
 8002b98:	4641      	mov	r1, r8
 8002b9a:	6820      	ldr	r0, [r4, #0]
 8002b9c:	f000 fc7e 	bl	800349c <memmove>
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	68a3      	ldr	r3, [r4, #8]
 8002ba4:	1b9b      	subs	r3, r3, r6
 8002ba6:	60a3      	str	r3, [r4, #8]
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	4433      	add	r3, r6
 8002bac:	6023      	str	r3, [r4, #0]
 8002bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb2:	462a      	mov	r2, r5
 8002bb4:	f000 fcb8 	bl	8003528 <_realloc_r>
 8002bb8:	4606      	mov	r6, r0
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d1e0      	bne.n	8002b80 <__ssputs_r+0x5c>
 8002bbe:	4650      	mov	r0, sl
 8002bc0:	6921      	ldr	r1, [r4, #16]
 8002bc2:	f7ff feb9 	bl	8002938 <_free_r>
 8002bc6:	230c      	movs	r3, #12
 8002bc8:	f8ca 3000 	str.w	r3, [sl]
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bd6:	81a3      	strh	r3, [r4, #12]
 8002bd8:	e7e9      	b.n	8002bae <__ssputs_r+0x8a>
	...

08002bdc <_svfiprintf_r>:
 8002bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be0:	4698      	mov	r8, r3
 8002be2:	898b      	ldrh	r3, [r1, #12]
 8002be4:	4607      	mov	r7, r0
 8002be6:	061b      	lsls	r3, r3, #24
 8002be8:	460d      	mov	r5, r1
 8002bea:	4614      	mov	r4, r2
 8002bec:	b09d      	sub	sp, #116	@ 0x74
 8002bee:	d510      	bpl.n	8002c12 <_svfiprintf_r+0x36>
 8002bf0:	690b      	ldr	r3, [r1, #16]
 8002bf2:	b973      	cbnz	r3, 8002c12 <_svfiprintf_r+0x36>
 8002bf4:	2140      	movs	r1, #64	@ 0x40
 8002bf6:	f7ff ff09 	bl	8002a0c <_malloc_r>
 8002bfa:	6028      	str	r0, [r5, #0]
 8002bfc:	6128      	str	r0, [r5, #16]
 8002bfe:	b930      	cbnz	r0, 8002c0e <_svfiprintf_r+0x32>
 8002c00:	230c      	movs	r3, #12
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	b01d      	add	sp, #116	@ 0x74
 8002c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c0e:	2340      	movs	r3, #64	@ 0x40
 8002c10:	616b      	str	r3, [r5, #20]
 8002c12:	2300      	movs	r3, #0
 8002c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c16:	2320      	movs	r3, #32
 8002c18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c1c:	2330      	movs	r3, #48	@ 0x30
 8002c1e:	f04f 0901 	mov.w	r9, #1
 8002c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c26:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002dc0 <_svfiprintf_r+0x1e4>
 8002c2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002c2e:	4623      	mov	r3, r4
 8002c30:	469a      	mov	sl, r3
 8002c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c36:	b10a      	cbz	r2, 8002c3c <_svfiprintf_r+0x60>
 8002c38:	2a25      	cmp	r2, #37	@ 0x25
 8002c3a:	d1f9      	bne.n	8002c30 <_svfiprintf_r+0x54>
 8002c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8002c40:	d00b      	beq.n	8002c5a <_svfiprintf_r+0x7e>
 8002c42:	465b      	mov	r3, fp
 8002c44:	4622      	mov	r2, r4
 8002c46:	4629      	mov	r1, r5
 8002c48:	4638      	mov	r0, r7
 8002c4a:	f7ff ff6b 	bl	8002b24 <__ssputs_r>
 8002c4e:	3001      	adds	r0, #1
 8002c50:	f000 80a7 	beq.w	8002da2 <_svfiprintf_r+0x1c6>
 8002c54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002c56:	445a      	add	r2, fp
 8002c58:	9209      	str	r2, [sp, #36]	@ 0x24
 8002c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 809f 	beq.w	8002da2 <_svfiprintf_r+0x1c6>
 8002c64:	2300      	movs	r3, #0
 8002c66:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c6e:	f10a 0a01 	add.w	sl, sl, #1
 8002c72:	9304      	str	r3, [sp, #16]
 8002c74:	9307      	str	r3, [sp, #28]
 8002c76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002c7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002c7c:	4654      	mov	r4, sl
 8002c7e:	2205      	movs	r2, #5
 8002c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c84:	484e      	ldr	r0, [pc, #312]	@ (8002dc0 <_svfiprintf_r+0x1e4>)
 8002c86:	f000 fc33 	bl	80034f0 <memchr>
 8002c8a:	9a04      	ldr	r2, [sp, #16]
 8002c8c:	b9d8      	cbnz	r0, 8002cc6 <_svfiprintf_r+0xea>
 8002c8e:	06d0      	lsls	r0, r2, #27
 8002c90:	bf44      	itt	mi
 8002c92:	2320      	movmi	r3, #32
 8002c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c98:	0711      	lsls	r1, r2, #28
 8002c9a:	bf44      	itt	mi
 8002c9c:	232b      	movmi	r3, #43	@ 0x2b
 8002c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8002ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ca8:	d015      	beq.n	8002cd6 <_svfiprintf_r+0xfa>
 8002caa:	4654      	mov	r4, sl
 8002cac:	2000      	movs	r0, #0
 8002cae:	f04f 0c0a 	mov.w	ip, #10
 8002cb2:	9a07      	ldr	r2, [sp, #28]
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cba:	3b30      	subs	r3, #48	@ 0x30
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	d94b      	bls.n	8002d58 <_svfiprintf_r+0x17c>
 8002cc0:	b1b0      	cbz	r0, 8002cf0 <_svfiprintf_r+0x114>
 8002cc2:	9207      	str	r2, [sp, #28]
 8002cc4:	e014      	b.n	8002cf0 <_svfiprintf_r+0x114>
 8002cc6:	eba0 0308 	sub.w	r3, r0, r8
 8002cca:	fa09 f303 	lsl.w	r3, r9, r3
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	46a2      	mov	sl, r4
 8002cd2:	9304      	str	r3, [sp, #16]
 8002cd4:	e7d2      	b.n	8002c7c <_svfiprintf_r+0xa0>
 8002cd6:	9b03      	ldr	r3, [sp, #12]
 8002cd8:	1d19      	adds	r1, r3, #4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	9103      	str	r1, [sp, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bfbb      	ittet	lt
 8002ce2:	425b      	neglt	r3, r3
 8002ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8002ce8:	9307      	strge	r3, [sp, #28]
 8002cea:	9307      	strlt	r3, [sp, #28]
 8002cec:	bfb8      	it	lt
 8002cee:	9204      	strlt	r2, [sp, #16]
 8002cf0:	7823      	ldrb	r3, [r4, #0]
 8002cf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002cf4:	d10a      	bne.n	8002d0c <_svfiprintf_r+0x130>
 8002cf6:	7863      	ldrb	r3, [r4, #1]
 8002cf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cfa:	d132      	bne.n	8002d62 <_svfiprintf_r+0x186>
 8002cfc:	9b03      	ldr	r3, [sp, #12]
 8002cfe:	3402      	adds	r4, #2
 8002d00:	1d1a      	adds	r2, r3, #4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	9203      	str	r2, [sp, #12]
 8002d06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d0a:	9305      	str	r3, [sp, #20]
 8002d0c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002dc4 <_svfiprintf_r+0x1e8>
 8002d10:	2203      	movs	r2, #3
 8002d12:	4650      	mov	r0, sl
 8002d14:	7821      	ldrb	r1, [r4, #0]
 8002d16:	f000 fbeb 	bl	80034f0 <memchr>
 8002d1a:	b138      	cbz	r0, 8002d2c <_svfiprintf_r+0x150>
 8002d1c:	2240      	movs	r2, #64	@ 0x40
 8002d1e:	9b04      	ldr	r3, [sp, #16]
 8002d20:	eba0 000a 	sub.w	r0, r0, sl
 8002d24:	4082      	lsls	r2, r0
 8002d26:	4313      	orrs	r3, r2
 8002d28:	3401      	adds	r4, #1
 8002d2a:	9304      	str	r3, [sp, #16]
 8002d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d30:	2206      	movs	r2, #6
 8002d32:	4825      	ldr	r0, [pc, #148]	@ (8002dc8 <_svfiprintf_r+0x1ec>)
 8002d34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002d38:	f000 fbda 	bl	80034f0 <memchr>
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d036      	beq.n	8002dae <_svfiprintf_r+0x1d2>
 8002d40:	4b22      	ldr	r3, [pc, #136]	@ (8002dcc <_svfiprintf_r+0x1f0>)
 8002d42:	bb1b      	cbnz	r3, 8002d8c <_svfiprintf_r+0x1b0>
 8002d44:	9b03      	ldr	r3, [sp, #12]
 8002d46:	3307      	adds	r3, #7
 8002d48:	f023 0307 	bic.w	r3, r3, #7
 8002d4c:	3308      	adds	r3, #8
 8002d4e:	9303      	str	r3, [sp, #12]
 8002d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d52:	4433      	add	r3, r6
 8002d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d56:	e76a      	b.n	8002c2e <_svfiprintf_r+0x52>
 8002d58:	460c      	mov	r4, r1
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d60:	e7a8      	b.n	8002cb4 <_svfiprintf_r+0xd8>
 8002d62:	2300      	movs	r3, #0
 8002d64:	f04f 0c0a 	mov.w	ip, #10
 8002d68:	4619      	mov	r1, r3
 8002d6a:	3401      	adds	r4, #1
 8002d6c:	9305      	str	r3, [sp, #20]
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d74:	3a30      	subs	r2, #48	@ 0x30
 8002d76:	2a09      	cmp	r2, #9
 8002d78:	d903      	bls.n	8002d82 <_svfiprintf_r+0x1a6>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0c6      	beq.n	8002d0c <_svfiprintf_r+0x130>
 8002d7e:	9105      	str	r1, [sp, #20]
 8002d80:	e7c4      	b.n	8002d0c <_svfiprintf_r+0x130>
 8002d82:	4604      	mov	r4, r0
 8002d84:	2301      	movs	r3, #1
 8002d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d8a:	e7f0      	b.n	8002d6e <_svfiprintf_r+0x192>
 8002d8c:	ab03      	add	r3, sp, #12
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	462a      	mov	r2, r5
 8002d92:	4638      	mov	r0, r7
 8002d94:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <_svfiprintf_r+0x1f4>)
 8002d96:	a904      	add	r1, sp, #16
 8002d98:	f3af 8000 	nop.w
 8002d9c:	1c42      	adds	r2, r0, #1
 8002d9e:	4606      	mov	r6, r0
 8002da0:	d1d6      	bne.n	8002d50 <_svfiprintf_r+0x174>
 8002da2:	89ab      	ldrh	r3, [r5, #12]
 8002da4:	065b      	lsls	r3, r3, #25
 8002da6:	f53f af2d 	bmi.w	8002c04 <_svfiprintf_r+0x28>
 8002daa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002dac:	e72c      	b.n	8002c08 <_svfiprintf_r+0x2c>
 8002dae:	ab03      	add	r3, sp, #12
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	462a      	mov	r2, r5
 8002db4:	4638      	mov	r0, r7
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <_svfiprintf_r+0x1f4>)
 8002db8:	a904      	add	r1, sp, #16
 8002dba:	f000 f9bd 	bl	8003138 <_printf_i>
 8002dbe:	e7ed      	b.n	8002d9c <_svfiprintf_r+0x1c0>
 8002dc0:	08003886 	.word	0x08003886
 8002dc4:	0800388c 	.word	0x0800388c
 8002dc8:	08003890 	.word	0x08003890
 8002dcc:	00000000 	.word	0x00000000
 8002dd0:	08002b25 	.word	0x08002b25

08002dd4 <__sfputc_r>:
 8002dd4:	6893      	ldr	r3, [r2, #8]
 8002dd6:	b410      	push	{r4}
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	6093      	str	r3, [r2, #8]
 8002dde:	da07      	bge.n	8002df0 <__sfputc_r+0x1c>
 8002de0:	6994      	ldr	r4, [r2, #24]
 8002de2:	42a3      	cmp	r3, r4
 8002de4:	db01      	blt.n	8002dea <__sfputc_r+0x16>
 8002de6:	290a      	cmp	r1, #10
 8002de8:	d102      	bne.n	8002df0 <__sfputc_r+0x1c>
 8002dea:	bc10      	pop	{r4}
 8002dec:	f000 bac2 	b.w	8003374 <__swbuf_r>
 8002df0:	6813      	ldr	r3, [r2, #0]
 8002df2:	1c58      	adds	r0, r3, #1
 8002df4:	6010      	str	r0, [r2, #0]
 8002df6:	7019      	strb	r1, [r3, #0]
 8002df8:	4608      	mov	r0, r1
 8002dfa:	bc10      	pop	{r4}
 8002dfc:	4770      	bx	lr

08002dfe <__sfputs_r>:
 8002dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e00:	4606      	mov	r6, r0
 8002e02:	460f      	mov	r7, r1
 8002e04:	4614      	mov	r4, r2
 8002e06:	18d5      	adds	r5, r2, r3
 8002e08:	42ac      	cmp	r4, r5
 8002e0a:	d101      	bne.n	8002e10 <__sfputs_r+0x12>
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	e007      	b.n	8002e20 <__sfputs_r+0x22>
 8002e10:	463a      	mov	r2, r7
 8002e12:	4630      	mov	r0, r6
 8002e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e18:	f7ff ffdc 	bl	8002dd4 <__sfputc_r>
 8002e1c:	1c43      	adds	r3, r0, #1
 8002e1e:	d1f3      	bne.n	8002e08 <__sfputs_r+0xa>
 8002e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e24 <_vfiprintf_r>:
 8002e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e28:	460d      	mov	r5, r1
 8002e2a:	4614      	mov	r4, r2
 8002e2c:	4698      	mov	r8, r3
 8002e2e:	4606      	mov	r6, r0
 8002e30:	b09d      	sub	sp, #116	@ 0x74
 8002e32:	b118      	cbz	r0, 8002e3c <_vfiprintf_r+0x18>
 8002e34:	6a03      	ldr	r3, [r0, #32]
 8002e36:	b90b      	cbnz	r3, 8002e3c <_vfiprintf_r+0x18>
 8002e38:	f7ff fc40 	bl	80026bc <__sinit>
 8002e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e3e:	07d9      	lsls	r1, r3, #31
 8002e40:	d405      	bmi.n	8002e4e <_vfiprintf_r+0x2a>
 8002e42:	89ab      	ldrh	r3, [r5, #12]
 8002e44:	059a      	lsls	r2, r3, #22
 8002e46:	d402      	bmi.n	8002e4e <_vfiprintf_r+0x2a>
 8002e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e4a:	f7ff fd72 	bl	8002932 <__retarget_lock_acquire_recursive>
 8002e4e:	89ab      	ldrh	r3, [r5, #12]
 8002e50:	071b      	lsls	r3, r3, #28
 8002e52:	d501      	bpl.n	8002e58 <_vfiprintf_r+0x34>
 8002e54:	692b      	ldr	r3, [r5, #16]
 8002e56:	b99b      	cbnz	r3, 8002e80 <_vfiprintf_r+0x5c>
 8002e58:	4629      	mov	r1, r5
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	f000 fac8 	bl	80033f0 <__swsetup_r>
 8002e60:	b170      	cbz	r0, 8002e80 <_vfiprintf_r+0x5c>
 8002e62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e64:	07dc      	lsls	r4, r3, #31
 8002e66:	d504      	bpl.n	8002e72 <_vfiprintf_r+0x4e>
 8002e68:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6c:	b01d      	add	sp, #116	@ 0x74
 8002e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e72:	89ab      	ldrh	r3, [r5, #12]
 8002e74:	0598      	lsls	r0, r3, #22
 8002e76:	d4f7      	bmi.n	8002e68 <_vfiprintf_r+0x44>
 8002e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e7a:	f7ff fd5b 	bl	8002934 <__retarget_lock_release_recursive>
 8002e7e:	e7f3      	b.n	8002e68 <_vfiprintf_r+0x44>
 8002e80:	2300      	movs	r3, #0
 8002e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e84:	2320      	movs	r3, #32
 8002e86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e8a:	2330      	movs	r3, #48	@ 0x30
 8002e8c:	f04f 0901 	mov.w	r9, #1
 8002e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e94:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003040 <_vfiprintf_r+0x21c>
 8002e98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e9c:	4623      	mov	r3, r4
 8002e9e:	469a      	mov	sl, r3
 8002ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ea4:	b10a      	cbz	r2, 8002eaa <_vfiprintf_r+0x86>
 8002ea6:	2a25      	cmp	r2, #37	@ 0x25
 8002ea8:	d1f9      	bne.n	8002e9e <_vfiprintf_r+0x7a>
 8002eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8002eae:	d00b      	beq.n	8002ec8 <_vfiprintf_r+0xa4>
 8002eb0:	465b      	mov	r3, fp
 8002eb2:	4622      	mov	r2, r4
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	4630      	mov	r0, r6
 8002eb8:	f7ff ffa1 	bl	8002dfe <__sfputs_r>
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	f000 80a7 	beq.w	8003010 <_vfiprintf_r+0x1ec>
 8002ec2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ec4:	445a      	add	r2, fp
 8002ec6:	9209      	str	r2, [sp, #36]	@ 0x24
 8002ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 809f 	beq.w	8003010 <_vfiprintf_r+0x1ec>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002edc:	f10a 0a01 	add.w	sl, sl, #1
 8002ee0:	9304      	str	r3, [sp, #16]
 8002ee2:	9307      	str	r3, [sp, #28]
 8002ee4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ee8:	931a      	str	r3, [sp, #104]	@ 0x68
 8002eea:	4654      	mov	r4, sl
 8002eec:	2205      	movs	r2, #5
 8002eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ef2:	4853      	ldr	r0, [pc, #332]	@ (8003040 <_vfiprintf_r+0x21c>)
 8002ef4:	f000 fafc 	bl	80034f0 <memchr>
 8002ef8:	9a04      	ldr	r2, [sp, #16]
 8002efa:	b9d8      	cbnz	r0, 8002f34 <_vfiprintf_r+0x110>
 8002efc:	06d1      	lsls	r1, r2, #27
 8002efe:	bf44      	itt	mi
 8002f00:	2320      	movmi	r3, #32
 8002f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f06:	0713      	lsls	r3, r2, #28
 8002f08:	bf44      	itt	mi
 8002f0a:	232b      	movmi	r3, #43	@ 0x2b
 8002f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f10:	f89a 3000 	ldrb.w	r3, [sl]
 8002f14:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f16:	d015      	beq.n	8002f44 <_vfiprintf_r+0x120>
 8002f18:	4654      	mov	r4, sl
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f04f 0c0a 	mov.w	ip, #10
 8002f20:	9a07      	ldr	r2, [sp, #28]
 8002f22:	4621      	mov	r1, r4
 8002f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f28:	3b30      	subs	r3, #48	@ 0x30
 8002f2a:	2b09      	cmp	r3, #9
 8002f2c:	d94b      	bls.n	8002fc6 <_vfiprintf_r+0x1a2>
 8002f2e:	b1b0      	cbz	r0, 8002f5e <_vfiprintf_r+0x13a>
 8002f30:	9207      	str	r2, [sp, #28]
 8002f32:	e014      	b.n	8002f5e <_vfiprintf_r+0x13a>
 8002f34:	eba0 0308 	sub.w	r3, r0, r8
 8002f38:	fa09 f303 	lsl.w	r3, r9, r3
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	46a2      	mov	sl, r4
 8002f40:	9304      	str	r3, [sp, #16]
 8002f42:	e7d2      	b.n	8002eea <_vfiprintf_r+0xc6>
 8002f44:	9b03      	ldr	r3, [sp, #12]
 8002f46:	1d19      	adds	r1, r3, #4
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	9103      	str	r1, [sp, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bfbb      	ittet	lt
 8002f50:	425b      	neglt	r3, r3
 8002f52:	f042 0202 	orrlt.w	r2, r2, #2
 8002f56:	9307      	strge	r3, [sp, #28]
 8002f58:	9307      	strlt	r3, [sp, #28]
 8002f5a:	bfb8      	it	lt
 8002f5c:	9204      	strlt	r2, [sp, #16]
 8002f5e:	7823      	ldrb	r3, [r4, #0]
 8002f60:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f62:	d10a      	bne.n	8002f7a <_vfiprintf_r+0x156>
 8002f64:	7863      	ldrb	r3, [r4, #1]
 8002f66:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f68:	d132      	bne.n	8002fd0 <_vfiprintf_r+0x1ac>
 8002f6a:	9b03      	ldr	r3, [sp, #12]
 8002f6c:	3402      	adds	r4, #2
 8002f6e:	1d1a      	adds	r2, r3, #4
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	9203      	str	r2, [sp, #12]
 8002f74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f78:	9305      	str	r3, [sp, #20]
 8002f7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003044 <_vfiprintf_r+0x220>
 8002f7e:	2203      	movs	r2, #3
 8002f80:	4650      	mov	r0, sl
 8002f82:	7821      	ldrb	r1, [r4, #0]
 8002f84:	f000 fab4 	bl	80034f0 <memchr>
 8002f88:	b138      	cbz	r0, 8002f9a <_vfiprintf_r+0x176>
 8002f8a:	2240      	movs	r2, #64	@ 0x40
 8002f8c:	9b04      	ldr	r3, [sp, #16]
 8002f8e:	eba0 000a 	sub.w	r0, r0, sl
 8002f92:	4082      	lsls	r2, r0
 8002f94:	4313      	orrs	r3, r2
 8002f96:	3401      	adds	r4, #1
 8002f98:	9304      	str	r3, [sp, #16]
 8002f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f9e:	2206      	movs	r2, #6
 8002fa0:	4829      	ldr	r0, [pc, #164]	@ (8003048 <_vfiprintf_r+0x224>)
 8002fa2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002fa6:	f000 faa3 	bl	80034f0 <memchr>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	d03f      	beq.n	800302e <_vfiprintf_r+0x20a>
 8002fae:	4b27      	ldr	r3, [pc, #156]	@ (800304c <_vfiprintf_r+0x228>)
 8002fb0:	bb1b      	cbnz	r3, 8002ffa <_vfiprintf_r+0x1d6>
 8002fb2:	9b03      	ldr	r3, [sp, #12]
 8002fb4:	3307      	adds	r3, #7
 8002fb6:	f023 0307 	bic.w	r3, r3, #7
 8002fba:	3308      	adds	r3, #8
 8002fbc:	9303      	str	r3, [sp, #12]
 8002fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fc0:	443b      	add	r3, r7
 8002fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fc4:	e76a      	b.n	8002e9c <_vfiprintf_r+0x78>
 8002fc6:	460c      	mov	r4, r1
 8002fc8:	2001      	movs	r0, #1
 8002fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fce:	e7a8      	b.n	8002f22 <_vfiprintf_r+0xfe>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f04f 0c0a 	mov.w	ip, #10
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	3401      	adds	r4, #1
 8002fda:	9305      	str	r3, [sp, #20]
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fe2:	3a30      	subs	r2, #48	@ 0x30
 8002fe4:	2a09      	cmp	r2, #9
 8002fe6:	d903      	bls.n	8002ff0 <_vfiprintf_r+0x1cc>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0c6      	beq.n	8002f7a <_vfiprintf_r+0x156>
 8002fec:	9105      	str	r1, [sp, #20]
 8002fee:	e7c4      	b.n	8002f7a <_vfiprintf_r+0x156>
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ff8:	e7f0      	b.n	8002fdc <_vfiprintf_r+0x1b8>
 8002ffa:	ab03      	add	r3, sp, #12
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	462a      	mov	r2, r5
 8003000:	4630      	mov	r0, r6
 8003002:	4b13      	ldr	r3, [pc, #76]	@ (8003050 <_vfiprintf_r+0x22c>)
 8003004:	a904      	add	r1, sp, #16
 8003006:	f3af 8000 	nop.w
 800300a:	4607      	mov	r7, r0
 800300c:	1c78      	adds	r0, r7, #1
 800300e:	d1d6      	bne.n	8002fbe <_vfiprintf_r+0x19a>
 8003010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003012:	07d9      	lsls	r1, r3, #31
 8003014:	d405      	bmi.n	8003022 <_vfiprintf_r+0x1fe>
 8003016:	89ab      	ldrh	r3, [r5, #12]
 8003018:	059a      	lsls	r2, r3, #22
 800301a:	d402      	bmi.n	8003022 <_vfiprintf_r+0x1fe>
 800301c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800301e:	f7ff fc89 	bl	8002934 <__retarget_lock_release_recursive>
 8003022:	89ab      	ldrh	r3, [r5, #12]
 8003024:	065b      	lsls	r3, r3, #25
 8003026:	f53f af1f 	bmi.w	8002e68 <_vfiprintf_r+0x44>
 800302a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800302c:	e71e      	b.n	8002e6c <_vfiprintf_r+0x48>
 800302e:	ab03      	add	r3, sp, #12
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	462a      	mov	r2, r5
 8003034:	4630      	mov	r0, r6
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <_vfiprintf_r+0x22c>)
 8003038:	a904      	add	r1, sp, #16
 800303a:	f000 f87d 	bl	8003138 <_printf_i>
 800303e:	e7e4      	b.n	800300a <_vfiprintf_r+0x1e6>
 8003040:	08003886 	.word	0x08003886
 8003044:	0800388c 	.word	0x0800388c
 8003048:	08003890 	.word	0x08003890
 800304c:	00000000 	.word	0x00000000
 8003050:	08002dff 	.word	0x08002dff

08003054 <_printf_common>:
 8003054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003058:	4616      	mov	r6, r2
 800305a:	4698      	mov	r8, r3
 800305c:	688a      	ldr	r2, [r1, #8]
 800305e:	690b      	ldr	r3, [r1, #16]
 8003060:	4607      	mov	r7, r0
 8003062:	4293      	cmp	r3, r2
 8003064:	bfb8      	it	lt
 8003066:	4613      	movlt	r3, r2
 8003068:	6033      	str	r3, [r6, #0]
 800306a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800306e:	460c      	mov	r4, r1
 8003070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003074:	b10a      	cbz	r2, 800307a <_printf_common+0x26>
 8003076:	3301      	adds	r3, #1
 8003078:	6033      	str	r3, [r6, #0]
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	0699      	lsls	r1, r3, #26
 800307e:	bf42      	ittt	mi
 8003080:	6833      	ldrmi	r3, [r6, #0]
 8003082:	3302      	addmi	r3, #2
 8003084:	6033      	strmi	r3, [r6, #0]
 8003086:	6825      	ldr	r5, [r4, #0]
 8003088:	f015 0506 	ands.w	r5, r5, #6
 800308c:	d106      	bne.n	800309c <_printf_common+0x48>
 800308e:	f104 0a19 	add.w	sl, r4, #25
 8003092:	68e3      	ldr	r3, [r4, #12]
 8003094:	6832      	ldr	r2, [r6, #0]
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	42ab      	cmp	r3, r5
 800309a:	dc2b      	bgt.n	80030f4 <_printf_common+0xa0>
 800309c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030a0:	6822      	ldr	r2, [r4, #0]
 80030a2:	3b00      	subs	r3, #0
 80030a4:	bf18      	it	ne
 80030a6:	2301      	movne	r3, #1
 80030a8:	0692      	lsls	r2, r2, #26
 80030aa:	d430      	bmi.n	800310e <_printf_common+0xba>
 80030ac:	4641      	mov	r1, r8
 80030ae:	4638      	mov	r0, r7
 80030b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030b4:	47c8      	blx	r9
 80030b6:	3001      	adds	r0, #1
 80030b8:	d023      	beq.n	8003102 <_printf_common+0xae>
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	6922      	ldr	r2, [r4, #16]
 80030be:	f003 0306 	and.w	r3, r3, #6
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	bf14      	ite	ne
 80030c6:	2500      	movne	r5, #0
 80030c8:	6833      	ldreq	r3, [r6, #0]
 80030ca:	f04f 0600 	mov.w	r6, #0
 80030ce:	bf08      	it	eq
 80030d0:	68e5      	ldreq	r5, [r4, #12]
 80030d2:	f104 041a 	add.w	r4, r4, #26
 80030d6:	bf08      	it	eq
 80030d8:	1aed      	subeq	r5, r5, r3
 80030da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80030de:	bf08      	it	eq
 80030e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030e4:	4293      	cmp	r3, r2
 80030e6:	bfc4      	itt	gt
 80030e8:	1a9b      	subgt	r3, r3, r2
 80030ea:	18ed      	addgt	r5, r5, r3
 80030ec:	42b5      	cmp	r5, r6
 80030ee:	d11a      	bne.n	8003126 <_printf_common+0xd2>
 80030f0:	2000      	movs	r0, #0
 80030f2:	e008      	b.n	8003106 <_printf_common+0xb2>
 80030f4:	2301      	movs	r3, #1
 80030f6:	4652      	mov	r2, sl
 80030f8:	4641      	mov	r1, r8
 80030fa:	4638      	mov	r0, r7
 80030fc:	47c8      	blx	r9
 80030fe:	3001      	adds	r0, #1
 8003100:	d103      	bne.n	800310a <_printf_common+0xb6>
 8003102:	f04f 30ff 	mov.w	r0, #4294967295
 8003106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800310a:	3501      	adds	r5, #1
 800310c:	e7c1      	b.n	8003092 <_printf_common+0x3e>
 800310e:	2030      	movs	r0, #48	@ 0x30
 8003110:	18e1      	adds	r1, r4, r3
 8003112:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800311c:	4422      	add	r2, r4
 800311e:	3302      	adds	r3, #2
 8003120:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003124:	e7c2      	b.n	80030ac <_printf_common+0x58>
 8003126:	2301      	movs	r3, #1
 8003128:	4622      	mov	r2, r4
 800312a:	4641      	mov	r1, r8
 800312c:	4638      	mov	r0, r7
 800312e:	47c8      	blx	r9
 8003130:	3001      	adds	r0, #1
 8003132:	d0e6      	beq.n	8003102 <_printf_common+0xae>
 8003134:	3601      	adds	r6, #1
 8003136:	e7d9      	b.n	80030ec <_printf_common+0x98>

08003138 <_printf_i>:
 8003138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800313c:	7e0f      	ldrb	r7, [r1, #24]
 800313e:	4691      	mov	r9, r2
 8003140:	2f78      	cmp	r7, #120	@ 0x78
 8003142:	4680      	mov	r8, r0
 8003144:	460c      	mov	r4, r1
 8003146:	469a      	mov	sl, r3
 8003148:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800314a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800314e:	d807      	bhi.n	8003160 <_printf_i+0x28>
 8003150:	2f62      	cmp	r7, #98	@ 0x62
 8003152:	d80a      	bhi.n	800316a <_printf_i+0x32>
 8003154:	2f00      	cmp	r7, #0
 8003156:	f000 80d1 	beq.w	80032fc <_printf_i+0x1c4>
 800315a:	2f58      	cmp	r7, #88	@ 0x58
 800315c:	f000 80b8 	beq.w	80032d0 <_printf_i+0x198>
 8003160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003164:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003168:	e03a      	b.n	80031e0 <_printf_i+0xa8>
 800316a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800316e:	2b15      	cmp	r3, #21
 8003170:	d8f6      	bhi.n	8003160 <_printf_i+0x28>
 8003172:	a101      	add	r1, pc, #4	@ (adr r1, 8003178 <_printf_i+0x40>)
 8003174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003178:	080031d1 	.word	0x080031d1
 800317c:	080031e5 	.word	0x080031e5
 8003180:	08003161 	.word	0x08003161
 8003184:	08003161 	.word	0x08003161
 8003188:	08003161 	.word	0x08003161
 800318c:	08003161 	.word	0x08003161
 8003190:	080031e5 	.word	0x080031e5
 8003194:	08003161 	.word	0x08003161
 8003198:	08003161 	.word	0x08003161
 800319c:	08003161 	.word	0x08003161
 80031a0:	08003161 	.word	0x08003161
 80031a4:	080032e3 	.word	0x080032e3
 80031a8:	0800320f 	.word	0x0800320f
 80031ac:	0800329d 	.word	0x0800329d
 80031b0:	08003161 	.word	0x08003161
 80031b4:	08003161 	.word	0x08003161
 80031b8:	08003305 	.word	0x08003305
 80031bc:	08003161 	.word	0x08003161
 80031c0:	0800320f 	.word	0x0800320f
 80031c4:	08003161 	.word	0x08003161
 80031c8:	08003161 	.word	0x08003161
 80031cc:	080032a5 	.word	0x080032a5
 80031d0:	6833      	ldr	r3, [r6, #0]
 80031d2:	1d1a      	adds	r2, r3, #4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6032      	str	r2, [r6, #0]
 80031d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031e0:	2301      	movs	r3, #1
 80031e2:	e09c      	b.n	800331e <_printf_i+0x1e6>
 80031e4:	6833      	ldr	r3, [r6, #0]
 80031e6:	6820      	ldr	r0, [r4, #0]
 80031e8:	1d19      	adds	r1, r3, #4
 80031ea:	6031      	str	r1, [r6, #0]
 80031ec:	0606      	lsls	r6, r0, #24
 80031ee:	d501      	bpl.n	80031f4 <_printf_i+0xbc>
 80031f0:	681d      	ldr	r5, [r3, #0]
 80031f2:	e003      	b.n	80031fc <_printf_i+0xc4>
 80031f4:	0645      	lsls	r5, r0, #25
 80031f6:	d5fb      	bpl.n	80031f0 <_printf_i+0xb8>
 80031f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80031fc:	2d00      	cmp	r5, #0
 80031fe:	da03      	bge.n	8003208 <_printf_i+0xd0>
 8003200:	232d      	movs	r3, #45	@ 0x2d
 8003202:	426d      	negs	r5, r5
 8003204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003208:	230a      	movs	r3, #10
 800320a:	4858      	ldr	r0, [pc, #352]	@ (800336c <_printf_i+0x234>)
 800320c:	e011      	b.n	8003232 <_printf_i+0xfa>
 800320e:	6821      	ldr	r1, [r4, #0]
 8003210:	6833      	ldr	r3, [r6, #0]
 8003212:	0608      	lsls	r0, r1, #24
 8003214:	f853 5b04 	ldr.w	r5, [r3], #4
 8003218:	d402      	bmi.n	8003220 <_printf_i+0xe8>
 800321a:	0649      	lsls	r1, r1, #25
 800321c:	bf48      	it	mi
 800321e:	b2ad      	uxthmi	r5, r5
 8003220:	2f6f      	cmp	r7, #111	@ 0x6f
 8003222:	6033      	str	r3, [r6, #0]
 8003224:	bf14      	ite	ne
 8003226:	230a      	movne	r3, #10
 8003228:	2308      	moveq	r3, #8
 800322a:	4850      	ldr	r0, [pc, #320]	@ (800336c <_printf_i+0x234>)
 800322c:	2100      	movs	r1, #0
 800322e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003232:	6866      	ldr	r6, [r4, #4]
 8003234:	2e00      	cmp	r6, #0
 8003236:	60a6      	str	r6, [r4, #8]
 8003238:	db05      	blt.n	8003246 <_printf_i+0x10e>
 800323a:	6821      	ldr	r1, [r4, #0]
 800323c:	432e      	orrs	r6, r5
 800323e:	f021 0104 	bic.w	r1, r1, #4
 8003242:	6021      	str	r1, [r4, #0]
 8003244:	d04b      	beq.n	80032de <_printf_i+0x1a6>
 8003246:	4616      	mov	r6, r2
 8003248:	fbb5 f1f3 	udiv	r1, r5, r3
 800324c:	fb03 5711 	mls	r7, r3, r1, r5
 8003250:	5dc7      	ldrb	r7, [r0, r7]
 8003252:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003256:	462f      	mov	r7, r5
 8003258:	42bb      	cmp	r3, r7
 800325a:	460d      	mov	r5, r1
 800325c:	d9f4      	bls.n	8003248 <_printf_i+0x110>
 800325e:	2b08      	cmp	r3, #8
 8003260:	d10b      	bne.n	800327a <_printf_i+0x142>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	07df      	lsls	r7, r3, #31
 8003266:	d508      	bpl.n	800327a <_printf_i+0x142>
 8003268:	6923      	ldr	r3, [r4, #16]
 800326a:	6861      	ldr	r1, [r4, #4]
 800326c:	4299      	cmp	r1, r3
 800326e:	bfde      	ittt	le
 8003270:	2330      	movle	r3, #48	@ 0x30
 8003272:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003276:	f106 36ff 	addle.w	r6, r6, #4294967295
 800327a:	1b92      	subs	r2, r2, r6
 800327c:	6122      	str	r2, [r4, #16]
 800327e:	464b      	mov	r3, r9
 8003280:	4621      	mov	r1, r4
 8003282:	4640      	mov	r0, r8
 8003284:	f8cd a000 	str.w	sl, [sp]
 8003288:	aa03      	add	r2, sp, #12
 800328a:	f7ff fee3 	bl	8003054 <_printf_common>
 800328e:	3001      	adds	r0, #1
 8003290:	d14a      	bne.n	8003328 <_printf_i+0x1f0>
 8003292:	f04f 30ff 	mov.w	r0, #4294967295
 8003296:	b004      	add	sp, #16
 8003298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	f043 0320 	orr.w	r3, r3, #32
 80032a2:	6023      	str	r3, [r4, #0]
 80032a4:	2778      	movs	r7, #120	@ 0x78
 80032a6:	4832      	ldr	r0, [pc, #200]	@ (8003370 <_printf_i+0x238>)
 80032a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	6831      	ldr	r1, [r6, #0]
 80032b0:	061f      	lsls	r7, r3, #24
 80032b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80032b6:	d402      	bmi.n	80032be <_printf_i+0x186>
 80032b8:	065f      	lsls	r7, r3, #25
 80032ba:	bf48      	it	mi
 80032bc:	b2ad      	uxthmi	r5, r5
 80032be:	6031      	str	r1, [r6, #0]
 80032c0:	07d9      	lsls	r1, r3, #31
 80032c2:	bf44      	itt	mi
 80032c4:	f043 0320 	orrmi.w	r3, r3, #32
 80032c8:	6023      	strmi	r3, [r4, #0]
 80032ca:	b11d      	cbz	r5, 80032d4 <_printf_i+0x19c>
 80032cc:	2310      	movs	r3, #16
 80032ce:	e7ad      	b.n	800322c <_printf_i+0xf4>
 80032d0:	4826      	ldr	r0, [pc, #152]	@ (800336c <_printf_i+0x234>)
 80032d2:	e7e9      	b.n	80032a8 <_printf_i+0x170>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	f023 0320 	bic.w	r3, r3, #32
 80032da:	6023      	str	r3, [r4, #0]
 80032dc:	e7f6      	b.n	80032cc <_printf_i+0x194>
 80032de:	4616      	mov	r6, r2
 80032e0:	e7bd      	b.n	800325e <_printf_i+0x126>
 80032e2:	6833      	ldr	r3, [r6, #0]
 80032e4:	6825      	ldr	r5, [r4, #0]
 80032e6:	1d18      	adds	r0, r3, #4
 80032e8:	6961      	ldr	r1, [r4, #20]
 80032ea:	6030      	str	r0, [r6, #0]
 80032ec:	062e      	lsls	r6, r5, #24
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	d501      	bpl.n	80032f6 <_printf_i+0x1be>
 80032f2:	6019      	str	r1, [r3, #0]
 80032f4:	e002      	b.n	80032fc <_printf_i+0x1c4>
 80032f6:	0668      	lsls	r0, r5, #25
 80032f8:	d5fb      	bpl.n	80032f2 <_printf_i+0x1ba>
 80032fa:	8019      	strh	r1, [r3, #0]
 80032fc:	2300      	movs	r3, #0
 80032fe:	4616      	mov	r6, r2
 8003300:	6123      	str	r3, [r4, #16]
 8003302:	e7bc      	b.n	800327e <_printf_i+0x146>
 8003304:	6833      	ldr	r3, [r6, #0]
 8003306:	2100      	movs	r1, #0
 8003308:	1d1a      	adds	r2, r3, #4
 800330a:	6032      	str	r2, [r6, #0]
 800330c:	681e      	ldr	r6, [r3, #0]
 800330e:	6862      	ldr	r2, [r4, #4]
 8003310:	4630      	mov	r0, r6
 8003312:	f000 f8ed 	bl	80034f0 <memchr>
 8003316:	b108      	cbz	r0, 800331c <_printf_i+0x1e4>
 8003318:	1b80      	subs	r0, r0, r6
 800331a:	6060      	str	r0, [r4, #4]
 800331c:	6863      	ldr	r3, [r4, #4]
 800331e:	6123      	str	r3, [r4, #16]
 8003320:	2300      	movs	r3, #0
 8003322:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003326:	e7aa      	b.n	800327e <_printf_i+0x146>
 8003328:	4632      	mov	r2, r6
 800332a:	4649      	mov	r1, r9
 800332c:	4640      	mov	r0, r8
 800332e:	6923      	ldr	r3, [r4, #16]
 8003330:	47d0      	blx	sl
 8003332:	3001      	adds	r0, #1
 8003334:	d0ad      	beq.n	8003292 <_printf_i+0x15a>
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	079b      	lsls	r3, r3, #30
 800333a:	d413      	bmi.n	8003364 <_printf_i+0x22c>
 800333c:	68e0      	ldr	r0, [r4, #12]
 800333e:	9b03      	ldr	r3, [sp, #12]
 8003340:	4298      	cmp	r0, r3
 8003342:	bfb8      	it	lt
 8003344:	4618      	movlt	r0, r3
 8003346:	e7a6      	b.n	8003296 <_printf_i+0x15e>
 8003348:	2301      	movs	r3, #1
 800334a:	4632      	mov	r2, r6
 800334c:	4649      	mov	r1, r9
 800334e:	4640      	mov	r0, r8
 8003350:	47d0      	blx	sl
 8003352:	3001      	adds	r0, #1
 8003354:	d09d      	beq.n	8003292 <_printf_i+0x15a>
 8003356:	3501      	adds	r5, #1
 8003358:	68e3      	ldr	r3, [r4, #12]
 800335a:	9903      	ldr	r1, [sp, #12]
 800335c:	1a5b      	subs	r3, r3, r1
 800335e:	42ab      	cmp	r3, r5
 8003360:	dcf2      	bgt.n	8003348 <_printf_i+0x210>
 8003362:	e7eb      	b.n	800333c <_printf_i+0x204>
 8003364:	2500      	movs	r5, #0
 8003366:	f104 0619 	add.w	r6, r4, #25
 800336a:	e7f5      	b.n	8003358 <_printf_i+0x220>
 800336c:	08003897 	.word	0x08003897
 8003370:	080038a8 	.word	0x080038a8

08003374 <__swbuf_r>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	460e      	mov	r6, r1
 8003378:	4614      	mov	r4, r2
 800337a:	4605      	mov	r5, r0
 800337c:	b118      	cbz	r0, 8003386 <__swbuf_r+0x12>
 800337e:	6a03      	ldr	r3, [r0, #32]
 8003380:	b90b      	cbnz	r3, 8003386 <__swbuf_r+0x12>
 8003382:	f7ff f99b 	bl	80026bc <__sinit>
 8003386:	69a3      	ldr	r3, [r4, #24]
 8003388:	60a3      	str	r3, [r4, #8]
 800338a:	89a3      	ldrh	r3, [r4, #12]
 800338c:	071a      	lsls	r2, r3, #28
 800338e:	d501      	bpl.n	8003394 <__swbuf_r+0x20>
 8003390:	6923      	ldr	r3, [r4, #16]
 8003392:	b943      	cbnz	r3, 80033a6 <__swbuf_r+0x32>
 8003394:	4621      	mov	r1, r4
 8003396:	4628      	mov	r0, r5
 8003398:	f000 f82a 	bl	80033f0 <__swsetup_r>
 800339c:	b118      	cbz	r0, 80033a6 <__swbuf_r+0x32>
 800339e:	f04f 37ff 	mov.w	r7, #4294967295
 80033a2:	4638      	mov	r0, r7
 80033a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	6922      	ldr	r2, [r4, #16]
 80033aa:	b2f6      	uxtb	r6, r6
 80033ac:	1a98      	subs	r0, r3, r2
 80033ae:	6963      	ldr	r3, [r4, #20]
 80033b0:	4637      	mov	r7, r6
 80033b2:	4283      	cmp	r3, r0
 80033b4:	dc05      	bgt.n	80033c2 <__swbuf_r+0x4e>
 80033b6:	4621      	mov	r1, r4
 80033b8:	4628      	mov	r0, r5
 80033ba:	f7ff f8b7 	bl	800252c <_fflush_r>
 80033be:	2800      	cmp	r0, #0
 80033c0:	d1ed      	bne.n	800339e <__swbuf_r+0x2a>
 80033c2:	68a3      	ldr	r3, [r4, #8]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	60a3      	str	r3, [r4, #8]
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	6022      	str	r2, [r4, #0]
 80033ce:	701e      	strb	r6, [r3, #0]
 80033d0:	6962      	ldr	r2, [r4, #20]
 80033d2:	1c43      	adds	r3, r0, #1
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d004      	beq.n	80033e2 <__swbuf_r+0x6e>
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	07db      	lsls	r3, r3, #31
 80033dc:	d5e1      	bpl.n	80033a2 <__swbuf_r+0x2e>
 80033de:	2e0a      	cmp	r6, #10
 80033e0:	d1df      	bne.n	80033a2 <__swbuf_r+0x2e>
 80033e2:	4621      	mov	r1, r4
 80033e4:	4628      	mov	r0, r5
 80033e6:	f7ff f8a1 	bl	800252c <_fflush_r>
 80033ea:	2800      	cmp	r0, #0
 80033ec:	d0d9      	beq.n	80033a2 <__swbuf_r+0x2e>
 80033ee:	e7d6      	b.n	800339e <__swbuf_r+0x2a>

080033f0 <__swsetup_r>:
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	4b29      	ldr	r3, [pc, #164]	@ (8003498 <__swsetup_r+0xa8>)
 80033f4:	4605      	mov	r5, r0
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	460c      	mov	r4, r1
 80033fa:	b118      	cbz	r0, 8003404 <__swsetup_r+0x14>
 80033fc:	6a03      	ldr	r3, [r0, #32]
 80033fe:	b90b      	cbnz	r3, 8003404 <__swsetup_r+0x14>
 8003400:	f7ff f95c 	bl	80026bc <__sinit>
 8003404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003408:	0719      	lsls	r1, r3, #28
 800340a:	d422      	bmi.n	8003452 <__swsetup_r+0x62>
 800340c:	06da      	lsls	r2, r3, #27
 800340e:	d407      	bmi.n	8003420 <__swsetup_r+0x30>
 8003410:	2209      	movs	r2, #9
 8003412:	602a      	str	r2, [r5, #0]
 8003414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003418:	f04f 30ff 	mov.w	r0, #4294967295
 800341c:	81a3      	strh	r3, [r4, #12]
 800341e:	e033      	b.n	8003488 <__swsetup_r+0x98>
 8003420:	0758      	lsls	r0, r3, #29
 8003422:	d512      	bpl.n	800344a <__swsetup_r+0x5a>
 8003424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003426:	b141      	cbz	r1, 800343a <__swsetup_r+0x4a>
 8003428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800342c:	4299      	cmp	r1, r3
 800342e:	d002      	beq.n	8003436 <__swsetup_r+0x46>
 8003430:	4628      	mov	r0, r5
 8003432:	f7ff fa81 	bl	8002938 <_free_r>
 8003436:	2300      	movs	r3, #0
 8003438:	6363      	str	r3, [r4, #52]	@ 0x34
 800343a:	89a3      	ldrh	r3, [r4, #12]
 800343c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003440:	81a3      	strh	r3, [r4, #12]
 8003442:	2300      	movs	r3, #0
 8003444:	6063      	str	r3, [r4, #4]
 8003446:	6923      	ldr	r3, [r4, #16]
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	f043 0308 	orr.w	r3, r3, #8
 8003450:	81a3      	strh	r3, [r4, #12]
 8003452:	6923      	ldr	r3, [r4, #16]
 8003454:	b94b      	cbnz	r3, 800346a <__swsetup_r+0x7a>
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800345c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003460:	d003      	beq.n	800346a <__swsetup_r+0x7a>
 8003462:	4621      	mov	r1, r4
 8003464:	4628      	mov	r0, r5
 8003466:	f000 f8b2 	bl	80035ce <__smakebuf_r>
 800346a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800346e:	f013 0201 	ands.w	r2, r3, #1
 8003472:	d00a      	beq.n	800348a <__swsetup_r+0x9a>
 8003474:	2200      	movs	r2, #0
 8003476:	60a2      	str	r2, [r4, #8]
 8003478:	6962      	ldr	r2, [r4, #20]
 800347a:	4252      	negs	r2, r2
 800347c:	61a2      	str	r2, [r4, #24]
 800347e:	6922      	ldr	r2, [r4, #16]
 8003480:	b942      	cbnz	r2, 8003494 <__swsetup_r+0xa4>
 8003482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003486:	d1c5      	bne.n	8003414 <__swsetup_r+0x24>
 8003488:	bd38      	pop	{r3, r4, r5, pc}
 800348a:	0799      	lsls	r1, r3, #30
 800348c:	bf58      	it	pl
 800348e:	6962      	ldrpl	r2, [r4, #20]
 8003490:	60a2      	str	r2, [r4, #8]
 8003492:	e7f4      	b.n	800347e <__swsetup_r+0x8e>
 8003494:	2000      	movs	r0, #0
 8003496:	e7f7      	b.n	8003488 <__swsetup_r+0x98>
 8003498:	20000030 	.word	0x20000030

0800349c <memmove>:
 800349c:	4288      	cmp	r0, r1
 800349e:	b510      	push	{r4, lr}
 80034a0:	eb01 0402 	add.w	r4, r1, r2
 80034a4:	d902      	bls.n	80034ac <memmove+0x10>
 80034a6:	4284      	cmp	r4, r0
 80034a8:	4623      	mov	r3, r4
 80034aa:	d807      	bhi.n	80034bc <memmove+0x20>
 80034ac:	1e43      	subs	r3, r0, #1
 80034ae:	42a1      	cmp	r1, r4
 80034b0:	d008      	beq.n	80034c4 <memmove+0x28>
 80034b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034ba:	e7f8      	b.n	80034ae <memmove+0x12>
 80034bc:	4601      	mov	r1, r0
 80034be:	4402      	add	r2, r0
 80034c0:	428a      	cmp	r2, r1
 80034c2:	d100      	bne.n	80034c6 <memmove+0x2a>
 80034c4:	bd10      	pop	{r4, pc}
 80034c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034ce:	e7f7      	b.n	80034c0 <memmove+0x24>

080034d0 <_sbrk_r>:
 80034d0:	b538      	push	{r3, r4, r5, lr}
 80034d2:	2300      	movs	r3, #0
 80034d4:	4d05      	ldr	r5, [pc, #20]	@ (80034ec <_sbrk_r+0x1c>)
 80034d6:	4604      	mov	r4, r0
 80034d8:	4608      	mov	r0, r1
 80034da:	602b      	str	r3, [r5, #0]
 80034dc:	f7fd f800 	bl	80004e0 <_sbrk>
 80034e0:	1c43      	adds	r3, r0, #1
 80034e2:	d102      	bne.n	80034ea <_sbrk_r+0x1a>
 80034e4:	682b      	ldr	r3, [r5, #0]
 80034e6:	b103      	cbz	r3, 80034ea <_sbrk_r+0x1a>
 80034e8:	6023      	str	r3, [r4, #0]
 80034ea:	bd38      	pop	{r3, r4, r5, pc}
 80034ec:	20000338 	.word	0x20000338

080034f0 <memchr>:
 80034f0:	4603      	mov	r3, r0
 80034f2:	b510      	push	{r4, lr}
 80034f4:	b2c9      	uxtb	r1, r1
 80034f6:	4402      	add	r2, r0
 80034f8:	4293      	cmp	r3, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	d101      	bne.n	8003502 <memchr+0x12>
 80034fe:	2000      	movs	r0, #0
 8003500:	e003      	b.n	800350a <memchr+0x1a>
 8003502:	7804      	ldrb	r4, [r0, #0]
 8003504:	3301      	adds	r3, #1
 8003506:	428c      	cmp	r4, r1
 8003508:	d1f6      	bne.n	80034f8 <memchr+0x8>
 800350a:	bd10      	pop	{r4, pc}

0800350c <memcpy>:
 800350c:	440a      	add	r2, r1
 800350e:	4291      	cmp	r1, r2
 8003510:	f100 33ff 	add.w	r3, r0, #4294967295
 8003514:	d100      	bne.n	8003518 <memcpy+0xc>
 8003516:	4770      	bx	lr
 8003518:	b510      	push	{r4, lr}
 800351a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800351e:	4291      	cmp	r1, r2
 8003520:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003524:	d1f9      	bne.n	800351a <memcpy+0xe>
 8003526:	bd10      	pop	{r4, pc}

08003528 <_realloc_r>:
 8003528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800352c:	4607      	mov	r7, r0
 800352e:	4614      	mov	r4, r2
 8003530:	460d      	mov	r5, r1
 8003532:	b921      	cbnz	r1, 800353e <_realloc_r+0x16>
 8003534:	4611      	mov	r1, r2
 8003536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800353a:	f7ff ba67 	b.w	8002a0c <_malloc_r>
 800353e:	b92a      	cbnz	r2, 800354c <_realloc_r+0x24>
 8003540:	f7ff f9fa 	bl	8002938 <_free_r>
 8003544:	4625      	mov	r5, r4
 8003546:	4628      	mov	r0, r5
 8003548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800354c:	f000 f89e 	bl	800368c <_malloc_usable_size_r>
 8003550:	4284      	cmp	r4, r0
 8003552:	4606      	mov	r6, r0
 8003554:	d802      	bhi.n	800355c <_realloc_r+0x34>
 8003556:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800355a:	d8f4      	bhi.n	8003546 <_realloc_r+0x1e>
 800355c:	4621      	mov	r1, r4
 800355e:	4638      	mov	r0, r7
 8003560:	f7ff fa54 	bl	8002a0c <_malloc_r>
 8003564:	4680      	mov	r8, r0
 8003566:	b908      	cbnz	r0, 800356c <_realloc_r+0x44>
 8003568:	4645      	mov	r5, r8
 800356a:	e7ec      	b.n	8003546 <_realloc_r+0x1e>
 800356c:	42b4      	cmp	r4, r6
 800356e:	4622      	mov	r2, r4
 8003570:	4629      	mov	r1, r5
 8003572:	bf28      	it	cs
 8003574:	4632      	movcs	r2, r6
 8003576:	f7ff ffc9 	bl	800350c <memcpy>
 800357a:	4629      	mov	r1, r5
 800357c:	4638      	mov	r0, r7
 800357e:	f7ff f9db 	bl	8002938 <_free_r>
 8003582:	e7f1      	b.n	8003568 <_realloc_r+0x40>

08003584 <__swhatbuf_r>:
 8003584:	b570      	push	{r4, r5, r6, lr}
 8003586:	460c      	mov	r4, r1
 8003588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358c:	4615      	mov	r5, r2
 800358e:	2900      	cmp	r1, #0
 8003590:	461e      	mov	r6, r3
 8003592:	b096      	sub	sp, #88	@ 0x58
 8003594:	da0c      	bge.n	80035b0 <__swhatbuf_r+0x2c>
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	2100      	movs	r1, #0
 800359a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800359e:	bf14      	ite	ne
 80035a0:	2340      	movne	r3, #64	@ 0x40
 80035a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80035a6:	2000      	movs	r0, #0
 80035a8:	6031      	str	r1, [r6, #0]
 80035aa:	602b      	str	r3, [r5, #0]
 80035ac:	b016      	add	sp, #88	@ 0x58
 80035ae:	bd70      	pop	{r4, r5, r6, pc}
 80035b0:	466a      	mov	r2, sp
 80035b2:	f000 f849 	bl	8003648 <_fstat_r>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	dbed      	blt.n	8003596 <__swhatbuf_r+0x12>
 80035ba:	9901      	ldr	r1, [sp, #4]
 80035bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80035c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80035c4:	4259      	negs	r1, r3
 80035c6:	4159      	adcs	r1, r3
 80035c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035cc:	e7eb      	b.n	80035a6 <__swhatbuf_r+0x22>

080035ce <__smakebuf_r>:
 80035ce:	898b      	ldrh	r3, [r1, #12]
 80035d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035d2:	079d      	lsls	r5, r3, #30
 80035d4:	4606      	mov	r6, r0
 80035d6:	460c      	mov	r4, r1
 80035d8:	d507      	bpl.n	80035ea <__smakebuf_r+0x1c>
 80035da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80035de:	6023      	str	r3, [r4, #0]
 80035e0:	6123      	str	r3, [r4, #16]
 80035e2:	2301      	movs	r3, #1
 80035e4:	6163      	str	r3, [r4, #20]
 80035e6:	b003      	add	sp, #12
 80035e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ea:	466a      	mov	r2, sp
 80035ec:	ab01      	add	r3, sp, #4
 80035ee:	f7ff ffc9 	bl	8003584 <__swhatbuf_r>
 80035f2:	9f00      	ldr	r7, [sp, #0]
 80035f4:	4605      	mov	r5, r0
 80035f6:	4639      	mov	r1, r7
 80035f8:	4630      	mov	r0, r6
 80035fa:	f7ff fa07 	bl	8002a0c <_malloc_r>
 80035fe:	b948      	cbnz	r0, 8003614 <__smakebuf_r+0x46>
 8003600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003604:	059a      	lsls	r2, r3, #22
 8003606:	d4ee      	bmi.n	80035e6 <__smakebuf_r+0x18>
 8003608:	f023 0303 	bic.w	r3, r3, #3
 800360c:	f043 0302 	orr.w	r3, r3, #2
 8003610:	81a3      	strh	r3, [r4, #12]
 8003612:	e7e2      	b.n	80035da <__smakebuf_r+0xc>
 8003614:	89a3      	ldrh	r3, [r4, #12]
 8003616:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800361a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800361e:	81a3      	strh	r3, [r4, #12]
 8003620:	9b01      	ldr	r3, [sp, #4]
 8003622:	6020      	str	r0, [r4, #0]
 8003624:	b15b      	cbz	r3, 800363e <__smakebuf_r+0x70>
 8003626:	4630      	mov	r0, r6
 8003628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800362c:	f000 f81e 	bl	800366c <_isatty_r>
 8003630:	b128      	cbz	r0, 800363e <__smakebuf_r+0x70>
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	f023 0303 	bic.w	r3, r3, #3
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	81a3      	strh	r3, [r4, #12]
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	431d      	orrs	r5, r3
 8003642:	81a5      	strh	r5, [r4, #12]
 8003644:	e7cf      	b.n	80035e6 <__smakebuf_r+0x18>
	...

08003648 <_fstat_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	2300      	movs	r3, #0
 800364c:	4d06      	ldr	r5, [pc, #24]	@ (8003668 <_fstat_r+0x20>)
 800364e:	4604      	mov	r4, r0
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	602b      	str	r3, [r5, #0]
 8003656:	f7fe fd66 	bl	8002126 <_fstat>
 800365a:	1c43      	adds	r3, r0, #1
 800365c:	d102      	bne.n	8003664 <_fstat_r+0x1c>
 800365e:	682b      	ldr	r3, [r5, #0]
 8003660:	b103      	cbz	r3, 8003664 <_fstat_r+0x1c>
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	bd38      	pop	{r3, r4, r5, pc}
 8003666:	bf00      	nop
 8003668:	20000338 	.word	0x20000338

0800366c <_isatty_r>:
 800366c:	b538      	push	{r3, r4, r5, lr}
 800366e:	2300      	movs	r3, #0
 8003670:	4d05      	ldr	r5, [pc, #20]	@ (8003688 <_isatty_r+0x1c>)
 8003672:	4604      	mov	r4, r0
 8003674:	4608      	mov	r0, r1
 8003676:	602b      	str	r3, [r5, #0]
 8003678:	f7fe feba 	bl	80023f0 <_isatty>
 800367c:	1c43      	adds	r3, r0, #1
 800367e:	d102      	bne.n	8003686 <_isatty_r+0x1a>
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	b103      	cbz	r3, 8003686 <_isatty_r+0x1a>
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	bd38      	pop	{r3, r4, r5, pc}
 8003688:	20000338 	.word	0x20000338

0800368c <_malloc_usable_size_r>:
 800368c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003690:	1f18      	subs	r0, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	bfbc      	itt	lt
 8003696:	580b      	ldrlt	r3, [r1, r0]
 8003698:	18c0      	addlt	r0, r0, r3
 800369a:	4770      	bx	lr

0800369c <_init>:
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369e:	bf00      	nop
 80036a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a2:	bc08      	pop	{r3}
 80036a4:	469e      	mov	lr, r3
 80036a6:	4770      	bx	lr

080036a8 <_fini>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	bf00      	nop
 80036ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ae:	bc08      	pop	{r3}
 80036b0:	469e      	mov	lr, r3
 80036b2:	4770      	bx	lr
